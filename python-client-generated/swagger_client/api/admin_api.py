# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AdminApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def admin_account_batch_delete(self, body, **kwargs):  # noqa: E501
        """从团队批量移除成员  # noqa: E501

        从团队批量移除成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_batch_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminCompanyMemberBatchDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_account_batch_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_account_batch_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_account_batch_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """从团队批量移除成员  # noqa: E501

        从团队批量移除成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_batch_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminCompanyMemberBatchDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_account_batch_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_account_batch_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_account/batch_delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_account_create(self, body, **kwargs):  # noqa: E501
        """创建用户  # noqa: E501

        创建用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_account_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_account_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_account_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """创建用户  # noqa: E501

        创建用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_account_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_account_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_account/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAccountCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_account_delete(self, body, **kwargs):  # noqa: E501
        """删除用户  # noqa: E501

        删除用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_account_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_account_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_account_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除用户  # noqa: E501

        删除用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_account_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_account_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_account/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAccountDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_account_get(self, body, **kwargs):  # noqa: E501
        """查询用户信息  # noqa: E501

        查询用户信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_account_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_account_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_account_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询用户信息  # noqa: E501

        查询用户信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_account_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_account_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_account/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAccountGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_account_join_company(self, body, **kwargs):  # noqa: E501
        """指定用户加入指定团队  # noqa: E501

        指定用户加入指定团队  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_join_company(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountMemberJoinCompanyRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_account_join_company_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_account_join_company_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_account_join_company_with_http_info(self, body, **kwargs):  # noqa: E501
        """指定用户加入指定团队  # noqa: E501

        指定用户加入指定团队  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_join_company_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountMemberJoinCompanyRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_account_join_company" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_account_join_company`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_account/join_company', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_account_list(self, body, **kwargs):  # noqa: E501
        """获取用户列表  # noqa: E501

        获取用户列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_account_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_account_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_account_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取用户列表  # noqa: E501

        获取用户列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_account_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_account_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_account/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAccountListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_account_password(self, body, **kwargs):  # noqa: E501
        """更改指定用户的密码  # noqa: E501

        更改指定用户的密码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountPasswordRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountPasswordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_account_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_account_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_account_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """更改指定用户的密码  # noqa: E501

        更改指定用户的密码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountPasswordRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountPasswordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_account_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_account_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_account/password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAccountPasswordResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_account_update(self, body, **kwargs):  # noqa: E501
        """更改用户信息  # noqa: E501

        更改用户信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_account_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_account_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_account_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """更改用户信息  # noqa: E501

        更改用户信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_account_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAccountUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAccountUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_account_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_account_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_account/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAccountUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_app_template_delete(self, body, **kwargs):  # noqa: E501
        """删除应用模板  # noqa: E501

        删除应用模板  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_app_template_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAppTemplateDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAppTemplateDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_app_template_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_app_template_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_app_template_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除应用模板  # noqa: E501

        删除应用模板  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_app_template_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAppTemplateDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAppTemplateDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_app_template_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_app_template_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_app_template/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAppTemplateDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_app_template_get(self, body, **kwargs):  # noqa: E501
        """根据id获取应用模板  # noqa: E501

        根据id获取应用模板  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_app_template_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAppTemplateGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAppTemplateGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_app_template_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_app_template_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_app_template_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """根据id获取应用模板  # noqa: E501

        根据id获取应用模板  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_app_template_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAppTemplateGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAppTemplateGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_app_template_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_app_template_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_app_template/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAppTemplateGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_app_template_import(self, body, **kwargs):  # noqa: E501
        """导入应用模板  # noqa: E501

        导入应用模板  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_app_template_import(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAppTemplateImportRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAppTemplateImportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_app_template_import_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_app_template_import_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_app_template_import_with_http_info(self, body, **kwargs):  # noqa: E501
        """导入应用模板  # noqa: E501

        导入应用模板  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_app_template_import_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAppTemplateImportRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAppTemplateImportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_app_template_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_app_template_import`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_app_template/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAppTemplateImportResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_app_template_list(self, body, **kwargs):  # noqa: E501
        """获取应用模板列表  # noqa: E501

        获取应用模板列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_app_template_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAppTemplateListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAppTemplateListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_app_template_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_app_template_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_app_template_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取应用模板列表  # noqa: E501

        获取应用模板列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_app_template_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAppTemplateListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAppTemplateListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_app_template_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_app_template_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_app_template/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAppTemplateListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_app_template_update(self, body, **kwargs):  # noqa: E501
        """更新应用模板  # noqa: E501

        更新应用模板  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_app_template_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAppTemplateUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAppTemplateUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_app_template_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_app_template_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_app_template_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """更新应用模板  # noqa: E501

        更新应用模板  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_app_template_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminAppTemplateUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminAppTemplateUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_app_template_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_app_template_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_app_template/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminAppTemplateUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_company_delete(self, body, **kwargs):  # noqa: E501
        """删除团队  # noqa: E501

        删除团队  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_company_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCompanyDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminCompanyDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_company_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_company_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_company_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除团队  # noqa: E501

        删除团队  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_company_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCompanyDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminCompanyDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_company_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_company_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_company/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminCompanyDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_company_get(self, body, **kwargs):  # noqa: E501
        """根据ID获取团队  # noqa: E501

        根据ID获取团队  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_company_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCompanyGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminCompanyGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_company_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_company_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_company_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """根据ID获取团队  # noqa: E501

        根据ID获取团队  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_company_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCompanyGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminCompanyGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_company_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_company_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_company/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminCompanyGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_company_list(self, body, **kwargs):  # noqa: E501
        """获取团队列表  # noqa: E501

        获取团队列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_company_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCompanyListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminCompanyListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_company_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_company_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_company_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取团队列表  # noqa: E501

        获取团队列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_company_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCompanyListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminCompanyListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_company_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_company_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_company/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminCompanyListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_company_pro(self, body, **kwargs):  # noqa: E501
        """设置团队版本为专业版  # noqa: E501

        设置团队版本为专业版  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_company_pro(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCompanySetProRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminCompanyProResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_company_pro_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_company_pro_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_company_pro_with_http_info(self, body, **kwargs):  # noqa: E501
        """设置团队版本为专业版  # noqa: E501

        设置团队版本为专业版  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_company_pro_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCompanySetProRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminCompanyProResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_company_pro" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_company_pro`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_company/pro', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminCompanyProResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_config_list(self, body, **kwargs):  # noqa: E501
        """查询配置列表  # noqa: E501

        查询配置列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_config_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminConfigListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminConfigListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_config_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_config_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_config_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询配置列表  # noqa: E501

        查询配置列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_config_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminConfigListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminConfigListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_config_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_config_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_config/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminConfigListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_config_update(self, body, **kwargs):  # noqa: E501
        """更新配置信息  # noqa: E501

        更新配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_config_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminConfigUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_config_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_config_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_config_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """更新配置信息  # noqa: E501

        更新配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_config_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminConfigUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_config_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin_config/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_import_license(self, body, **kwargs):  # noqa: E501
        """导入许可证  # noqa: E501

        导入许可证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_import_license(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminImportLicenseRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminImportLicenseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_import_license_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_import_license_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_import_license_with_http_info(self, body, **kwargs):  # noqa: E501
        """导入许可证  # noqa: E501

        导入许可证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_import_license_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminImportLicenseRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminImportLicenseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_import_license" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_import_license`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin/import_license', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminImportLicenseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_import_sub_license(self, body, **kwargs):  # noqa: E501
        """导入子许可证  # noqa: E501

        导入子许可证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_import_sub_license(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminImportSubLicenseRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminImportSubLicenseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_import_sub_license_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_import_sub_license_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_import_sub_license_with_http_info(self, body, **kwargs):  # noqa: E501
        """导入子许可证  # noqa: E501

        导入子许可证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_import_sub_license_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminImportSubLicenseRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminImportSubLicenseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_import_sub_license" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_import_sub_license`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin/import_sub_license', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminImportSubLicenseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_refresh_token(self, body, **kwargs):  # noqa: E501
        """刷新adminToken  # noqa: E501

        刷新adminToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_refresh_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminTokenRefreshRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminRefreshTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_refresh_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_refresh_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_refresh_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """刷新adminToken  # noqa: E501

        刷新adminToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_refresh_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminTokenRefreshRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminRefreshTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_refresh_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_refresh_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin/refresh_token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminRefreshTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_token(self, body, **kwargs):  # noqa: E501
        """获取adminToken  # noqa: E501

        获取adminToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminTokenRequest body: (required)
        :return: AdminTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取adminToken  # noqa: E501

        获取adminToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminTokenRequest body: (required)
        :return: AdminTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_version(self, body, **kwargs):  # noqa: E501
        """系统版本号  # noqa: E501

        系统版本号  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_version(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_version_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_version_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_version_with_http_info(self, body, **kwargs):  # noqa: E501
        """系统版本号  # noqa: E501

        系统版本号  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_version_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AdminVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/admin/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminVersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
