# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AppApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def app_auth(self, body, **kwargs):  # noqa: E501
        """应用鉴权  # noqa: E501

        应用鉴权  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_auth(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppAuthRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_auth_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_auth_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_auth_with_http_info(self, body, **kwargs):  # noqa: E501
        """应用鉴权  # noqa: E501

        应用鉴权  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_auth_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppAuthRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_auth`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app/auth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppAuthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_delete(self, body, **kwargs):  # noqa: E501
        """删除应用  # noqa: E501

        删除应用  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除应用  # noqa: E501

        删除应用  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_import(self, body, **kwargs):  # noqa: E501
        """通过ima文件安装应用  # noqa: E501

        通过ima文件安装应用  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_import(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppImportRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppImportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_import_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_import_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_import_with_http_info(self, body, **kwargs):  # noqa: E501
        """通过ima文件安装应用  # noqa: E501

        通过ima文件安装应用  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_import_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppImportRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppImportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_import`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppImportResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_install_template(self, body, **kwargs):  # noqa: E501
        """通过应用模板安装应用  # noqa: E501

        通过应用模板安装应用  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_install_template(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppInstallTemplateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppInstallTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_install_template_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_install_template_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_install_template_with_http_info(self, body, **kwargs):  # noqa: E501
        """通过应用模板安装应用  # noqa: E501

        通过应用模板安装应用  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_install_template_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppInstallTemplateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppInstallTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_install_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_install_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app/install_template', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppInstallTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_list(self, body, **kwargs):  # noqa: E501
        """应用列表  # noqa: E501

        应用列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """应用列表  # noqa: E501

        应用列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_member_create(self, body, **kwargs):  # noqa: E501
        """创建应用成员  # noqa: E501

        创建应用成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_member_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_member_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_member_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """创建应用成员  # noqa: E501

        创建应用成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_member_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_member_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_member/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppMemberCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_member_delete(self, body, **kwargs):  # noqa: E501
        """从应用移除成员  # noqa: E501

        从应用移除成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_member_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_member_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_member_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """从应用移除成员  # noqa: E501

        从应用移除成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_member_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_member_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_member/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppMemberDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_member_get(self, body, **kwargs):  # noqa: E501
        """查询应用成员  # noqa: E501

        查询应用成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_member_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_member_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_member_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询应用成员  # noqa: E501

        查询应用成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_member_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_member_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_member/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppMemberGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_member_list(self, body, **kwargs):  # noqa: E501
        """获取成员列表  # noqa: E501

        获取成员列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_member_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_member_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_member_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取成员列表  # noqa: E501

        获取成员列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_member_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_member_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_member/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppMemberListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_member_role_create(self, body, **kwargs):  # noqa: E501
        """创建应用角色  # noqa: E501

        创建应用角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_role_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberRoleCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberRoleCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_member_role_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_member_role_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_member_role_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """创建应用角色  # noqa: E501

        创建应用角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_role_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberRoleCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberRoleCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_member_role_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_member_role_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_member_role/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppMemberRoleCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_member_role_delete(self, body, **kwargs):  # noqa: E501
        """删除应用角色  # noqa: E501

        删除应用角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_role_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberRoleDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberRoleDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_member_role_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_member_role_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_member_role_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除应用角色  # noqa: E501

        删除应用角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_role_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberRoleDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberRoleDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_member_role_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_member_role_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_member_role/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppMemberRoleDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_member_role_get(self, body, **kwargs):  # noqa: E501
        """获取应用角色  # noqa: E501

        获取应用角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_role_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberRoleGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberRoleGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_member_role_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_member_role_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_member_role_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取应用角色  # noqa: E501

        获取应用角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_role_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberRoleGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberRoleGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_member_role_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_member_role_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_member_role/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppMemberRoleGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_member_role_list(self, body, **kwargs):  # noqa: E501
        """获取应用角色列表  # noqa: E501

        获取应用角色列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_role_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberRoleListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberRoleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_member_role_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_member_role_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_member_role_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取应用角色列表  # noqa: E501

        获取应用角色列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_role_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberRoleListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberRoleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_member_role_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_member_role_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_member_role/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppMemberRoleListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_member_role_update(self, body, **kwargs):  # noqa: E501
        """更新应用角色  # noqa: E501

        更新应用角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_role_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberRoleUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberRoleUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_member_role_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_member_role_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_member_role_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """更新应用角色  # noqa: E501

        更新应用角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_role_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberRoleUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberRoleUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_member_role_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_member_role_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_member_role/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppMemberRoleUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_member_update(self, body, **kwargs):  # noqa: E501
        """更新应用成员  # noqa: E501

        更新应用成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_member_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_member_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_member_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """更新应用成员  # noqa: E501

        更新应用成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_member_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppMemberUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppMemberUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_member_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_member_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_member/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppMemberUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_module_get(self, body, **kwargs):  # noqa: E501
        """应用模块查询  # noqa: E501

        应用模块查询  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_module_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppModuleGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppModuleGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_module_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_module_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_module_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """应用模块查询  # noqa: E501

        应用模块查询  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_module_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppModuleGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppModuleGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_module_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_module_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_module/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppModuleGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_module_list(self, body, **kwargs):  # noqa: E501
        """应用模块列表  # noqa: E501

        应用模块列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_module_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppModuleListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppModuleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_module_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_module_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_module_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """应用模块列表  # noqa: E501

        应用模块列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_module_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppModuleListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppModuleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_module_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_module_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_module/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppModuleListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_refresh_token(self, body, **kwargs):  # noqa: E501
        """刷新应用accessToken  # noqa: E501

        刷新应用accessToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_refresh_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppRefreshTokenRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppRefreshTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_refresh_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_refresh_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_refresh_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """刷新应用accessToken  # noqa: E501

        刷新应用accessToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_refresh_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppRefreshTokenRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppRefreshTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_refresh_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_refresh_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app/refresh_token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppRefreshTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_script_create(self, body, **kwargs):  # noqa: E501
        """创建脚本  # noqa: E501

        创建脚本  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_script_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppScriptCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppScriptCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_script_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_script_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_script_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """创建脚本  # noqa: E501

        创建脚本  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_script_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppScriptCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppScriptCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_script_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_script_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_script/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppScriptCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_script_delete(self, body, **kwargs):  # noqa: E501
        """删除脚本  # noqa: E501

        删除脚本  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_script_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppScriptDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppScriptDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_script_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_script_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_script_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除脚本  # noqa: E501

        删除脚本  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_script_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppScriptDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppScriptDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_script_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_script_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_script/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppScriptDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_script_list(self, body, **kwargs):  # noqa: E501
        """查询脚本列表  # noqa: E501

        查询脚本列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_script_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppScriptListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppScriptListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_script_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_script_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_script_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询脚本列表  # noqa: E501

        查询脚本列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_script_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppScriptListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppScriptListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_script_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_script_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_script/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppScriptListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_script_load(self, body, **kwargs):  # noqa: E501
        """装载脚本  # noqa: E501

        装载脚本  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_script_load(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppScriptLoadRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_script_load_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_script_load_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_script_load_with_http_info(self, body, **kwargs):  # noqa: E501
        """装载脚本  # noqa: E501

        装载脚本  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_script_load_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppScriptLoadRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_script_load" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_script_load`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_script/load', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_script_update(self, body, **kwargs):  # noqa: E501
        """编辑脚本  # noqa: E501

        编辑脚本  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_script_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppScriptUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppScriptUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_script_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_script_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_script_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """编辑脚本  # noqa: E501

        编辑脚本  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_script_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppScriptUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppScriptUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_script_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_script_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app_script/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppScriptUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_token(self, body, **kwargs):  # noqa: E501
        """获取应用accessToken  # noqa: E501

        获取应用accessToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppTokenRequest body: (required)
        :return: AppTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取应用accessToken  # noqa: E501

        获取应用accessToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppTokenRequest body: (required)
        :return: AppTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/app/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_version(self, body, **kwargs):  # noqa: E501
        """系统版本号  # noqa: E501

        系统版本号  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_version(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppVersionRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_version_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.app_version_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def app_version_with_http_info(self, body, **kwargs):  # noqa: E501
        """系统版本号  # noqa: E501

        系统版本号  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_version_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppVersionRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: AppVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `app_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/app/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppVersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_get(self, body, **kwargs):  # noqa: E501
        """查询数据表  # noqa: E501

        查询数据表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询数据表  # noqa: E501

        查询数据表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_list(self, body, **kwargs):  # noqa: E501
        """数据表列表  # noqa: E501

        数据表列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """数据表列表  # noqa: E501

        数据表列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_record_batch_create(self, body, **kwargs):  # noqa: E501
        """批量创建数据表记录  # noqa: E501

        批量创建数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_batch_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordBatchCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordBatchCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_record_batch_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_record_batch_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_record_batch_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """批量创建数据表记录  # noqa: E501

        批量创建数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_batch_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordBatchCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordBatchCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_record_batch_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_record_batch_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_record/batch_create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableRecordBatchCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_record_batch_delete(self, body, **kwargs):  # noqa: E501
        """批量删除数据表记录  # noqa: E501

        批量删除数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_batch_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordBatchDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordBatchDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_record_batch_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_record_batch_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_record_batch_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """批量删除数据表记录  # noqa: E501

        批量删除数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_batch_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordBatchDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordBatchDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_record_batch_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_record_batch_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_record/batch_delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableRecordBatchDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_record_batch_update(self, body, **kwargs):  # noqa: E501
        """批量编辑数据表记录  # noqa: E501

        批量编辑数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_batch_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordBatchUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordBatchUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_record_batch_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_record_batch_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_record_batch_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """批量编辑数据表记录  # noqa: E501

        批量编辑数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_batch_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordBatchUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordBatchUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_record_batch_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_record_batch_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_record/batch_update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableRecordBatchUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_record_create(self, body, **kwargs):  # noqa: E501
        """创建数据表记录  # noqa: E501

        创建数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_record_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_record_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_record_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """创建数据表记录  # noqa: E501

        创建数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_record_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_record_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_record/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableRecordCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_record_delete(self, body, **kwargs):  # noqa: E501
        """删除数据表记录  # noqa: E501

        删除数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_record_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_record_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_record_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除数据表记录  # noqa: E501

        删除数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_record_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_record_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_record/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableRecordDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_record_list(self, body, **kwargs):  # noqa: E501
        """查询数据表记录列表  # noqa: E501

        查询数据表记录列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_record_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_record_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_record_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询数据表记录列表  # noqa: E501

        查询数据表记录列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_record_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_record_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_record/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableRecordListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_record_update(self, body, **kwargs):  # noqa: E501
        """编辑数据表记录  # noqa: E501

        编辑数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_record_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_record_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_record_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """编辑数据表记录  # noqa: E501

        编辑数据表记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_record_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableRecordUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableRecordUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_record_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_record_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_record/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableRecordUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_chart_get(self, body, **kwargs):  # noqa: E501
        """通过id查询审批流程图详情  # noqa: E501

        通过id查询审批流程图详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_chart_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowChartGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowChartGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_chart_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_chart_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_chart_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """通过id查询审批流程图详情  # noqa: E501

        通过id查询审批流程图详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_chart_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowChartGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowChartGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_chart_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_chart_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_chart/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowChartGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_chart_list(self, body, **kwargs):  # noqa: E501
        """查询审批流程图列表  # noqa: E501

        查询审批流程图列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_chart_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowChartListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowChartListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_chart_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_chart_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_chart_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询审批流程图列表  # noqa: E501

        查询审批流程图列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_chart_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowChartListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowChartListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_chart_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_chart_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_chart/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowChartListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_get(self, body, **kwargs):  # noqa: E501
        """通过id查询审批流程详情  # noqa: E501

        通过id查询审批流程详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """通过id查询审批流程详情  # noqa: E501

        通过id查询审批流程详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_cancel(self, body, **kwargs):  # noqa: E501
        """取消审批流程  # noqa: E501

        取消审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_cancel(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceCancelRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_cancel_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_cancel_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_cancel_with_http_info(self, body, **kwargs):  # noqa: E501
        """取消审批流程  # noqa: E501

        取消审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_cancel_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceCancelRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_cancel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_cancel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceCancelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_create(self, body, **kwargs):  # noqa: E501
        """发起审批流程  # noqa: E501

        发起审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """发起审批流程  # noqa: E501

        发起审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_get(self, body, **kwargs):  # noqa: E501
        """通过ID查询审批流程实例详情  # noqa: E501

        通过ID查询审批流程实例详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """通过ID查询审批流程实例详情  # noqa: E501

        通过ID查询审批流程实例详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_list(self, body, **kwargs):  # noqa: E501
        """查询审批流程实例列表  # noqa: E501

        查询审批流程实例列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询审批流程实例列表  # noqa: E501

        查询审批流程实例列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_node_get(self, body, **kwargs):  # noqa: E501
        """通过ID查询审批流程实例节点详情  # noqa: E501

        通过ID查询审批流程实例节点详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_node_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_node_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_node_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """通过ID查询审批流程实例节点详情  # noqa: E501

        通过ID查询审批流程实例节点详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_node_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_node_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance_node/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceNodeGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_node_list(self, body, **kwargs):  # noqa: E501
        """查询审批流程实例节点列表  # noqa: E501

        查询审批流程实例节点列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_node_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_node_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_node_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询审批流程实例节点列表  # noqa: E501

        查询审批流程实例节点列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_node_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_node_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance_node/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceNodeListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_node_owner_agree(self, body, **kwargs):  # noqa: E501
        """同意审批流程  # noqa: E501

        同意审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_agree(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerAgreeRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerAgreeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_node_owner_agree_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_node_owner_agree_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_node_owner_agree_with_http_info(self, body, **kwargs):  # noqa: E501
        """同意审批流程  # noqa: E501

        同意审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_agree_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerAgreeRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerAgreeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_node_owner_agree" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_node_owner_agree`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance_node_owner/agree', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceNodeOwnerAgreeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_node_owner_get(self, body, **kwargs):  # noqa: E501
        """通过ID查询审批流程实例节点审批人  # noqa: E501

        通过ID查询审批流程实例节点审批人  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_node_owner_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_node_owner_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_node_owner_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """通过ID查询审批流程实例节点审批人  # noqa: E501

        通过ID查询审批流程实例节点审批人  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_node_owner_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_node_owner_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance_node_owner/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceNodeOwnerGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_node_owner_list(self, body, **kwargs):  # noqa: E501
        """查询审批流程实例节点审批人列表  # noqa: E501

        查询审批流程实例节点审批人列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_node_owner_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_node_owner_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_node_owner_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询审批流程实例节点审批人列表  # noqa: E501

        查询审批流程实例节点审批人列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_node_owner_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_node_owner_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance_node_owner/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceNodeOwnerListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_node_owner_refuse(self, body, **kwargs):  # noqa: E501
        """拒绝审批流程  # noqa: E501

        拒绝审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_refuse(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerRefuseRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerRefuseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_node_owner_refuse_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_node_owner_refuse_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_node_owner_refuse_with_http_info(self, body, **kwargs):  # noqa: E501
        """拒绝审批流程  # noqa: E501

        拒绝审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_refuse_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerRefuseRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerRefuseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_node_owner_refuse" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_node_owner_refuse`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance_node_owner/refuse', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceNodeOwnerRefuseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_node_owner_rollback(self, body, **kwargs):  # noqa: E501
        """回退审批流程  # noqa: E501

        回退审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_rollback(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerRollbackRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerRollbackResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_node_owner_rollback_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_node_owner_rollback_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_node_owner_rollback_with_http_info(self, body, **kwargs):  # noqa: E501
        """回退审批流程  # noqa: E501

        回退审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_rollback_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerRollbackRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerRollbackResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_node_owner_rollback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_node_owner_rollback`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance_node_owner/rollback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceNodeOwnerRollbackResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_node_owner_transfer(self, body, **kwargs):  # noqa: E501
        """转交审批流程  # noqa: E501

        转交审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_transfer(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerTransferRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_node_owner_transfer_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_node_owner_transfer_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_node_owner_transfer_with_http_info(self, body, **kwargs):  # noqa: E501
        """转交审批流程  # noqa: E501

        转交审批流程  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_node_owner_transfer_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceNodeOwnerTransferRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceNodeOwnerTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_node_owner_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_node_owner_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance_node_owner/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceNodeOwnerTransferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_instance_set_owner(self, body, **kwargs):  # noqa: E501
        """设置审批人  # noqa: E501

        设置审批人  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_set_owner(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceSetOwnerRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceSetOwnerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_instance_set_owner_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_instance_set_owner_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_instance_set_owner_with_http_info(self, body, **kwargs):  # noqa: E501
        """设置审批人  # noqa: E501

        设置审批人  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_instance_set_owner_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowInstanceSetOwnerRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowInstanceSetOwnerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_instance_set_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_instance_set_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow_instance/set_owner', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowInstanceSetOwnerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def table_workflow_list(self, body, **kwargs):  # noqa: E501
        """查询审批流程列表  # noqa: E501

        查询审批流程列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.table_workflow_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.table_workflow_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def table_workflow_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询审批流程列表  # noqa: E501

        查询审批流程列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.table_workflow_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableWorkflowListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: TableWorkflowListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method table_workflow_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `table_workflow_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/table_workflow/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableWorkflowListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_material_create(self, body, **kwargs):  # noqa: E501
        """创建网站模块素材  # noqa: E501

        创建网站模块素材  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_material_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsiteMaterialCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsiteMaterialCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_material_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.website_material_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def website_material_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """创建网站模块素材  # noqa: E501

        创建网站模块素材  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_material_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsiteMaterialCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsiteMaterialCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_material_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `website_material_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/website_material/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebsiteMaterialCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_material_delete(self, body, **kwargs):  # noqa: E501
        """删除网站模块素材  # noqa: E501

        删除网站模块素材  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_material_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsiteMaterialDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsiteMaterialDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_material_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.website_material_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def website_material_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除网站模块素材  # noqa: E501

        删除网站模块素材  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_material_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsiteMaterialDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsiteMaterialDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_material_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `website_material_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/website_material/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebsiteMaterialDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_material_list(self, body, **kwargs):  # noqa: E501
        """查询网站模块素材列表  # noqa: E501

        查询网站模块素材列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_material_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsiteMaterialListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsiteMaterialListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_material_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.website_material_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def website_material_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询网站模块素材列表  # noqa: E501

        查询网站模块素材列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_material_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsiteMaterialListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsiteMaterialListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_material_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `website_material_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/website_material/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebsiteMaterialListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_material_update(self, body, **kwargs):  # noqa: E501
        """更新网站模块素材  # noqa: E501

        更新网站模块素材  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_material_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsiteMaterialUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsiteMaterialUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_material_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.website_material_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def website_material_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """更新网站模块素材  # noqa: E501

        更新网站模块素材  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_material_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsiteMaterialUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsiteMaterialUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_material_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `website_material_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/website_material/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebsiteMaterialUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_page_create(self, body, **kwargs):  # noqa: E501
        """创建网站模块页面  # noqa: E501

        创建网站模块页面  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePageCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_page_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.website_page_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def website_page_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """创建网站模块页面  # noqa: E501

        创建网站模块页面  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePageCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_page_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `website_page_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/website_page/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebsitePageCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_page_delete(self, body, **kwargs):  # noqa: E501
        """删除网站模块页面  # noqa: E501

        删除网站模块页面  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePageDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePageDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_page_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.website_page_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def website_page_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除网站模块页面  # noqa: E501

        删除网站模块页面  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePageDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePageDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_page_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `website_page_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/website_page/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebsitePageDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_page_get(self, body, **kwargs):  # noqa: E501
        """通过ID查询网站模板页面  # noqa: E501

        通过ID查询网站模板页面  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePageGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePageGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_page_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.website_page_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def website_page_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """通过ID查询网站模板页面  # noqa: E501

        通过ID查询网站模板页面  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePageGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePageGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_page_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `website_page_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/website_page/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebsitePageGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_page_list(self, body, **kwargs):  # noqa: E501
        """查询网站模板页面列表  # noqa: E501

        查询网站模板页面列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePageListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePageListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_page_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.website_page_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def website_page_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """查询网站模板页面列表  # noqa: E501

        查询网站模板页面列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePageListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePageListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_page_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `website_page_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/website_page/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebsitePageListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_page_publish(self, body, **kwargs):  # noqa: E501
        """发布网站模块页面  # noqa: E501

        发布网站模块页面  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_publish(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePagePublishRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePagePublishResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_page_publish_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.website_page_publish_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def website_page_publish_with_http_info(self, body, **kwargs):  # noqa: E501
        """发布网站模块页面  # noqa: E501

        发布网站模块页面  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_publish_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePagePublishRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePagePublishResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_page_publish" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `website_page_publish`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/website_page/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebsitePagePublishResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_page_update(self, body, **kwargs):  # noqa: E501
        """编辑网站模块页面  # noqa: E501

        编辑网站模块页面  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePageUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePageUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_page_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.website_page_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def website_page_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """编辑网站模块页面  # noqa: E501

        编辑网站模块页面  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_page_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebsitePageUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: WebsitePageUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_page_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `website_page_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/website_page/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebsitePageUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
