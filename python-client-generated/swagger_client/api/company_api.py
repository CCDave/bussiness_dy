# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CompanyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def company_department_create(self, body, **kwargs):  # noqa: E501
        """创建部门  # noqa: E501

        创建部门  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_department_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyDepartmentCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyDepartmentCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_department_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_department_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_department_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """创建部门  # noqa: E501

        创建部门  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_department_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyDepartmentCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyDepartmentCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_department_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_department_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_department/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyDepartmentCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_department_delete(self, body, **kwargs):  # noqa: E501
        """删除部门  # noqa: E501

        删除部门  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_department_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyDepartmentDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyDepartmentDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_department_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_department_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_department_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除部门  # noqa: E501

        删除部门  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_department_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyDepartmentDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyDepartmentDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_department_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_department_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_department/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyDepartmentDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_department_list(self, body, **kwargs):  # noqa: E501
        """获取部门列表  # noqa: E501

        获取部门列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_department_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyDepartmentListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyDepartmentListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_department_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_department_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_department_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取部门列表  # noqa: E501

        获取部门列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_department_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyDepartmentListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyDepartmentListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_department_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_department_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_department/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyDepartmentListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_department_update(self, body, **kwargs):  # noqa: E501
        """更新部门  # noqa: E501

        更新部门  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_department_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyDepartmentUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyDepartmentUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_department_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_department_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_department_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """更新部门  # noqa: E501

        更新部门  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_department_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyDepartmentUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyDepartmentUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_department_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_department_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_department/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyDepartmentUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_get(self, body, **kwargs):  # noqa: E501
        """获取当前团队信息  # noqa: E501

        获取当前团队信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取当前团队信息  # noqa: E501

        获取当前团队信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_member_batch_delete(self, body, **kwargs):  # noqa: E501
        """从团队批量移除成员  # noqa: E501

        从团队批量移除成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_batch_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberBatchDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_member_batch_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_member_batch_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_member_batch_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """从团队批量移除成员  # noqa: E501

        从团队批量移除成员  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_batch_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberBatchDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_member_batch_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_member_batch_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_member/batch_delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_member_get(self, body, **kwargs):  # noqa: E501
        """根据token查询用户信息  # noqa: E501

        根据token查询用户信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_member_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_member_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_member_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """根据token查询用户信息  # noqa: E501

        根据token查询用户信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberGetRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_member_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_member_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_member/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyMemberGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_member_list(self, body, **kwargs):  # noqa: E501
        """获取成员列表  # noqa: E501

        获取成员列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_member_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_member_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_member_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取成员列表  # noqa: E501

        获取成员列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_member_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_member_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_member/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyMemberListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_member_role_create(self, body, **kwargs):  # noqa: E501
        """创建角色  # noqa: E501

        创建角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_role_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberRoleCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberRoleCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_member_role_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_member_role_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_member_role_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """创建角色  # noqa: E501

        创建角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_role_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberRoleCreateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberRoleCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_member_role_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_member_role_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_member_role/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyMemberRoleCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_member_role_delete(self, body, **kwargs):  # noqa: E501
        """删除角色  # noqa: E501

        删除角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_role_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberRoleDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberRoleDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_member_role_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_member_role_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_member_role_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """删除角色  # noqa: E501

        删除角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_role_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberRoleDeleteRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberRoleDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_member_role_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_member_role_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_member_role/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyMemberRoleDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_member_role_list(self, body, **kwargs):  # noqa: E501
        """获取角色列表  # noqa: E501

        获取角色列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_role_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberRoleListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberRoleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_member_role_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_member_role_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_member_role_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取角色列表  # noqa: E501

        获取角色列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_role_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberRoleListRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberRoleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_member_role_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_member_role_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_member_role/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyMemberRoleListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_member_role_update(self, body, **kwargs):  # noqa: E501
        """更新角色  # noqa: E501

        更新角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_role_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberRoleUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberRoleUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_member_role_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_member_role_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_member_role_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """更新角色  # noqa: E501

        更新角色  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_role_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberRoleUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberRoleUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_member_role_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_member_role_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_member_role/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyMemberRoleUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_member_update(self, body, **kwargs):  # noqa: E501
        """更新成员信息  # noqa: E501

        更新成员信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_member_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_member_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_member_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """更新成员信息  # noqa: E501

        更新成员信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_member_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyMemberUpdateRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyMemberUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_member_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_member_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company_member/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyMemberUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_refresh_token(self, body, **kwargs):  # noqa: E501
        """刷新团队token  # noqa: E501

        刷新团队token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_refresh_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyRefreshTokenRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyRefreshTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_refresh_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_refresh_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_refresh_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """刷新团队token  # noqa: E501

        刷新团队token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_refresh_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyRefreshTokenRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: CompanyRefreshTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_refresh_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_refresh_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company/refresh_token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyRefreshTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_token(self, body, **kwargs):  # noqa: E501
        """获取团队token  # noqa: E501

        获取团队token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyTokenRequest body: (required)
        :return: CompanyTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取团队token  # noqa: E501

        获取团队token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyTokenRequest body: (required)
        :return: CompanyTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/company/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def company_update_logo(self, body, **kwargs):  # noqa: E501
        """修改团队logo  # noqa: E501

        修改团队logo  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_update_logo(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyUpdateLogoRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.company_update_logo_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.company_update_logo_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def company_update_logo_with_http_info(self, body, **kwargs):  # noqa: E501
        """修改团队logo  # noqa: E501

        修改团队logo  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.company_update_logo_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyUpdateLogoRequest body: (required)
        :param str oid: OID
        :param str company_id: 团队ID
        :param str app_id: 应用ID
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'oid', 'company_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method company_update_logo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `company_update_logo`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'oid' in params:
            header_params['oid'] = params['oid']  # noqa: E501
        if 'company_id' in params:
            header_params['companyId'] = params['company_id']  # noqa: E501
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken']  # noqa: E501

        return self.api_client.call_api(
            '/v2/company/update_logo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
