# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeOwnerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_id': 'str',
        'node_name': 'str',
        'forward_rule': 'str',
        'owner': 'list[object]',
        'cc': 'list[object]'
    }

    attribute_map = {
        'node_id': 'nodeId',
        'node_name': 'nodeName',
        'forward_rule': 'forwardRule',
        'owner': 'owner',
        'cc': 'cc'
    }

    def __init__(self, node_id=None, node_name=None, forward_rule=None, owner=None, cc=None):  # noqa: E501
        """NodeOwnerInfo - a model defined in Swagger"""  # noqa: E501
        self._node_id = None
        self._node_name = None
        self._forward_rule = None
        self._owner = None
        self._cc = None
        self.discriminator = None
        if node_id is not None:
            self.node_id = node_id
        if node_name is not None:
            self.node_name = node_name
        if forward_rule is not None:
            self.forward_rule = forward_rule
        if owner is not None:
            self.owner = owner
        if cc is not None:
            self.cc = cc

    @property
    def node_id(self):
        """Gets the node_id of this NodeOwnerInfo.  # noqa: E501

        节点ID  # noqa: E501

        :return: The node_id of this NodeOwnerInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeOwnerInfo.

        节点ID  # noqa: E501

        :param node_id: The node_id of this NodeOwnerInfo.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def node_name(self):
        """Gets the node_name of this NodeOwnerInfo.  # noqa: E501

        节点名称  # noqa: E501

        :return: The node_name of this NodeOwnerInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this NodeOwnerInfo.

        节点名称  # noqa: E501

        :param node_name: The node_name of this NodeOwnerInfo.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def forward_rule(self):
        """Gets the forward_rule of this NodeOwnerInfo.  # noqa: E501

        流转规则  # noqa: E501

        :return: The forward_rule of this NodeOwnerInfo.  # noqa: E501
        :rtype: str
        """
        return self._forward_rule

    @forward_rule.setter
    def forward_rule(self, forward_rule):
        """Sets the forward_rule of this NodeOwnerInfo.

        流转规则  # noqa: E501

        :param forward_rule: The forward_rule of this NodeOwnerInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["any", "all"]  # noqa: E501
        if forward_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `forward_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(forward_rule, allowed_values)
            )

        self._forward_rule = forward_rule

    @property
    def owner(self):
        """Gets the owner of this NodeOwnerInfo.  # noqa: E501

        审批人列表  # noqa: E501

        :return: The owner of this NodeOwnerInfo.  # noqa: E501
        :rtype: list[object]
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this NodeOwnerInfo.

        审批人列表  # noqa: E501

        :param owner: The owner of this NodeOwnerInfo.  # noqa: E501
        :type: list[object]
        """

        self._owner = owner

    @property
    def cc(self):
        """Gets the cc of this NodeOwnerInfo.  # noqa: E501

        抄送人列表  # noqa: E501

        :return: The cc of this NodeOwnerInfo.  # noqa: E501
        :rtype: list[object]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this NodeOwnerInfo.

        抄送人列表  # noqa: E501

        :param cc: The cc of this NodeOwnerInfo.  # noqa: E501
        :type: list[object]
        """

        self._cc = cc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeOwnerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeOwnerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
