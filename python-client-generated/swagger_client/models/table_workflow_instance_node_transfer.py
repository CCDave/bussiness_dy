# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableWorkflowInstanceNodeTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'float',
        '_from': 'TableAccountSimple',
        'to': 'list[TableAccountSimple]',
        'comment': 'str'
    }

    attribute_map = {
        'create_time': 'createTime',
        '_from': 'from',
        'to': 'to',
        'comment': 'comment'
    }

    def __init__(self, create_time=None, _from=None, to=None, comment=None):  # noqa: E501
        """TableWorkflowInstanceNodeTransfer - a model defined in Swagger"""  # noqa: E501
        self._create_time = None
        self.__from = None
        self._to = None
        self._comment = None
        self.discriminator = None
        if create_time is not None:
            self.create_time = create_time
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if comment is not None:
            self.comment = comment

    @property
    def create_time(self):
        """Gets the create_time of this TableWorkflowInstanceNodeTransfer.  # noqa: E501

        创建时间  # noqa: E501

        :return: The create_time of this TableWorkflowInstanceNodeTransfer.  # noqa: E501
        :rtype: float
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TableWorkflowInstanceNodeTransfer.

        创建时间  # noqa: E501

        :param create_time: The create_time of this TableWorkflowInstanceNodeTransfer.  # noqa: E501
        :type: float
        """

        self._create_time = create_time

    @property
    def _from(self):
        """Gets the _from of this TableWorkflowInstanceNodeTransfer.  # noqa: E501


        :return: The _from of this TableWorkflowInstanceNodeTransfer.  # noqa: E501
        :rtype: TableAccountSimple
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this TableWorkflowInstanceNodeTransfer.


        :param _from: The _from of this TableWorkflowInstanceNodeTransfer.  # noqa: E501
        :type: TableAccountSimple
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this TableWorkflowInstanceNodeTransfer.  # noqa: E501

        下级节点  # noqa: E501

        :return: The to of this TableWorkflowInstanceNodeTransfer.  # noqa: E501
        :rtype: list[TableAccountSimple]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this TableWorkflowInstanceNodeTransfer.

        下级节点  # noqa: E501

        :param to: The to of this TableWorkflowInstanceNodeTransfer.  # noqa: E501
        :type: list[TableAccountSimple]
        """

        self._to = to

    @property
    def comment(self):
        """Gets the comment of this TableWorkflowInstanceNodeTransfer.  # noqa: E501

        备注  # noqa: E501

        :return: The comment of this TableWorkflowInstanceNodeTransfer.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TableWorkflowInstanceNodeTransfer.

        备注  # noqa: E501

        :param comment: The comment of this TableWorkflowInstanceNodeTransfer.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableWorkflowInstanceNodeTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableWorkflowInstanceNodeTransfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
