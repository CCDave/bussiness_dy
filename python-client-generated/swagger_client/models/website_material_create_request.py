# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebsiteMaterialCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'website_id': 'str',
        'name': 'str',
        'attachment_id': 'str',
        'size': 'float',
        'md5': 'str'
    }

    attribute_map = {
        'website_id': 'websiteId',
        'name': 'name',
        'attachment_id': 'attachmentId',
        'size': 'size',
        'md5': 'md5'
    }

    def __init__(self, website_id=None, name=None, attachment_id=None, size=None, md5=None):  # noqa: E501
        """WebsiteMaterialCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._website_id = None
        self._name = None
        self._attachment_id = None
        self._size = None
        self._md5 = None
        self.discriminator = None
        self.website_id = website_id
        self.name = name
        self.attachment_id = attachment_id
        self.size = size
        if md5 is not None:
            self.md5 = md5

    @property
    def website_id(self):
        """Gets the website_id of this WebsiteMaterialCreateRequest.  # noqa: E501

        网站ID  # noqa: E501

        :return: The website_id of this WebsiteMaterialCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this WebsiteMaterialCreateRequest.

        网站ID  # noqa: E501

        :param website_id: The website_id of this WebsiteMaterialCreateRequest.  # noqa: E501
        :type: str
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")  # noqa: E501

        self._website_id = website_id

    @property
    def name(self):
        """Gets the name of this WebsiteMaterialCreateRequest.  # noqa: E501

        名称  # noqa: E501

        :return: The name of this WebsiteMaterialCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebsiteMaterialCreateRequest.

        名称  # noqa: E501

        :param name: The name of this WebsiteMaterialCreateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def attachment_id(self):
        """Gets the attachment_id of this WebsiteMaterialCreateRequest.  # noqa: E501

        附件  # noqa: E501

        :return: The attachment_id of this WebsiteMaterialCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this WebsiteMaterialCreateRequest.

        附件  # noqa: E501

        :param attachment_id: The attachment_id of this WebsiteMaterialCreateRequest.  # noqa: E501
        :type: str
        """
        if attachment_id is None:
            raise ValueError("Invalid value for `attachment_id`, must not be `None`")  # noqa: E501

        self._attachment_id = attachment_id

    @property
    def size(self):
        """Gets the size of this WebsiteMaterialCreateRequest.  # noqa: E501

        附件大小  # noqa: E501

        :return: The size of this WebsiteMaterialCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this WebsiteMaterialCreateRequest.

        附件大小  # noqa: E501

        :param size: The size of this WebsiteMaterialCreateRequest.  # noqa: E501
        :type: float
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def md5(self):
        """Gets the md5 of this WebsiteMaterialCreateRequest.  # noqa: E501

        md5值  # noqa: E501

        :return: The md5 of this WebsiteMaterialCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this WebsiteMaterialCreateRequest.

        md5值  # noqa: E501

        :param md5: The md5 of this WebsiteMaterialCreateRequest.  # noqa: E501
        :type: str
        """

        self._md5 = md5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebsiteMaterialCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebsiteMaterialCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
