# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableRecordListVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'record_list': 'list[dict(str, object)]',
        'count': 'int',
        'is_error': 'bool',
        'is_permission_denied': 'bool'
    }

    attribute_map = {
        'record_list': 'recordList',
        'count': 'count',
        'is_error': 'isError',
        'is_permission_denied': 'isPermissionDenied'
    }

    def __init__(self, record_list=None, count=None, is_error=None, is_permission_denied=None):  # noqa: E501
        """TableRecordListVO - a model defined in Swagger"""  # noqa: E501
        self._record_list = None
        self._count = None
        self._is_error = None
        self._is_permission_denied = None
        self.discriminator = None
        if record_list is not None:
            self.record_list = record_list
        if count is not None:
            self.count = count
        if is_error is not None:
            self.is_error = is_error
        if is_permission_denied is not None:
            self.is_permission_denied = is_permission_denied

    @property
    def record_list(self):
        """Gets the record_list of this TableRecordListVO.  # noqa: E501

        记录列表  # noqa: E501

        :return: The record_list of this TableRecordListVO.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._record_list

    @record_list.setter
    def record_list(self, record_list):
        """Sets the record_list of this TableRecordListVO.

        记录列表  # noqa: E501

        :param record_list: The record_list of this TableRecordListVO.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._record_list = record_list

    @property
    def count(self):
        """Gets the count of this TableRecordListVO.  # noqa: E501

        数量  # noqa: E501

        :return: The count of this TableRecordListVO.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TableRecordListVO.

        数量  # noqa: E501

        :param count: The count of this TableRecordListVO.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def is_error(self):
        """Gets the is_error of this TableRecordListVO.  # noqa: E501

        是否错误  # noqa: E501

        :return: The is_error of this TableRecordListVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_error

    @is_error.setter
    def is_error(self, is_error):
        """Sets the is_error of this TableRecordListVO.

        是否错误  # noqa: E501

        :param is_error: The is_error of this TableRecordListVO.  # noqa: E501
        :type: bool
        """

        self._is_error = is_error

    @property
    def is_permission_denied(self):
        """Gets the is_permission_denied of this TableRecordListVO.  # noqa: E501

        是否权限不足  # noqa: E501

        :return: The is_permission_denied of this TableRecordListVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_permission_denied

    @is_permission_denied.setter
    def is_permission_denied(self, is_permission_denied):
        """Sets the is_permission_denied of this TableRecordListVO.

        是否权限不足  # noqa: E501

        :param is_permission_denied: The is_permission_denied of this TableRecordListVO.  # noqa: E501
        :type: bool
        """

        self._is_permission_denied = is_permission_denied

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableRecordListVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableRecordListVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
