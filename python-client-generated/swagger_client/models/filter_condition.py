# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilterCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'opt': 'str',
        'condition_list': 'list[Condition]',
        'children': 'list[FilterCondition]'
    }

    attribute_map = {
        'opt': 'opt',
        'condition_list': 'conditionList',
        'children': 'children'
    }

    def __init__(self, opt=None, condition_list=None, children=None):  # noqa: E501
        """FilterCondition - a model defined in Swagger"""  # noqa: E501
        self._opt = None
        self._condition_list = None
        self._children = None
        self.discriminator = None
        if opt is not None:
            self.opt = opt
        if condition_list is not None:
            self.condition_list = condition_list
        if children is not None:
            self.children = children

    @property
    def opt(self):
        """Gets the opt of this FilterCondition.  # noqa: E501

        操作符  # noqa: E501

        :return: The opt of this FilterCondition.  # noqa: E501
        :rtype: str
        """
        return self._opt

    @opt.setter
    def opt(self, opt):
        """Sets the opt of this FilterCondition.

        操作符  # noqa: E501

        :param opt: The opt of this FilterCondition.  # noqa: E501
        :type: str
        """
        allowed_values = ["and", "or"]  # noqa: E501
        if opt not in allowed_values:
            raise ValueError(
                "Invalid value for `opt` ({0}), must be one of {1}"  # noqa: E501
                .format(opt, allowed_values)
            )

        self._opt = opt

    @property
    def condition_list(self):
        """Gets the condition_list of this FilterCondition.  # noqa: E501

        条件列表  # noqa: E501

        :return: The condition_list of this FilterCondition.  # noqa: E501
        :rtype: list[Condition]
        """
        return self._condition_list

    @condition_list.setter
    def condition_list(self, condition_list):
        """Sets the condition_list of this FilterCondition.

        条件列表  # noqa: E501

        :param condition_list: The condition_list of this FilterCondition.  # noqa: E501
        :type: list[Condition]
        """

        self._condition_list = condition_list

    @property
    def children(self):
        """Gets the children of this FilterCondition.  # noqa: E501

        子过滤器  # noqa: E501

        :return: The children of this FilterCondition.  # noqa: E501
        :rtype: list[FilterCondition]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this FilterCondition.

        子过滤器  # noqa: E501

        :param children: The children of this FilterCondition.  # noqa: E501
        :type: list[FilterCondition]
        """

        self._children = children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
