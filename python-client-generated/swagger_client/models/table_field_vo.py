# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableFieldVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'table_id': 'str',
        'module_name': 'str',
        'name': 'str',
        'icon': 'str',
        'type': 'str',
        'group_id': 'str',
        'setting': 'dict(str, object)',
        'remark': 'str',
        'is_private_visible': 'bool',
        'private_visible': 'AccessControl',
        'is_private_edit': 'bool',
        'private_edit': 'AccessControl',
        'is_condition_visible': 'bool',
        'condition_visible_filter': 'FilterCondition',
        'is_condition_readonly': 'bool',
        'condition_readonly_filter': 'FilterCondition',
        'display_width': 'int',
        'id': 'str',
        'company_id': 'str',
        'application_id': 'str',
        'create_time': 'float',
        'update_time': 'float',
        'create_account_id': 'str',
        'create_account_name': 'str',
        'update_account_id': 'str',
        'update_account_name': 'str',
        'app_name': 'str',
        'app_color': 'str',
        'app_icon': 'str',
        'is_delete': 'bool'
    }

    attribute_map = {
        'table_id': 'tableId',
        'module_name': 'moduleName',
        'name': 'name',
        'icon': 'icon',
        'type': 'type',
        'group_id': 'groupId',
        'setting': 'setting',
        'remark': 'remark',
        'is_private_visible': 'isPrivateVisible',
        'private_visible': 'privateVisible',
        'is_private_edit': 'isPrivateEdit',
        'private_edit': 'privateEdit',
        'is_condition_visible': 'isConditionVisible',
        'condition_visible_filter': 'conditionVisibleFilter',
        'is_condition_readonly': 'isConditionReadonly',
        'condition_readonly_filter': 'conditionReadonlyFilter',
        'display_width': 'displayWidth',
        'id': 'id',
        'company_id': 'companyId',
        'application_id': 'applicationId',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'create_account_id': 'createAccountId',
        'create_account_name': 'createAccountName',
        'update_account_id': 'updateAccountId',
        'update_account_name': 'updateAccountName',
        'app_name': 'appName',
        'app_color': 'appColor',
        'app_icon': 'appIcon',
        'is_delete': 'isDelete'
    }

    def __init__(self, table_id=None, module_name=None, name=None, icon=None, type=None, group_id=None, setting=None, remark=None, is_private_visible=None, private_visible=None, is_private_edit=None, private_edit=None, is_condition_visible=None, condition_visible_filter=None, is_condition_readonly=None, condition_readonly_filter=None, display_width=None, id=None, company_id=None, application_id=None, create_time=None, update_time=None, create_account_id=None, create_account_name=None, update_account_id=None, update_account_name=None, app_name=None, app_color=None, app_icon=None, is_delete=None):  # noqa: E501
        """TableFieldVO - a model defined in Swagger"""  # noqa: E501
        self._table_id = None
        self._module_name = None
        self._name = None
        self._icon = None
        self._type = None
        self._group_id = None
        self._setting = None
        self._remark = None
        self._is_private_visible = None
        self._private_visible = None
        self._is_private_edit = None
        self._private_edit = None
        self._is_condition_visible = None
        self._condition_visible_filter = None
        self._is_condition_readonly = None
        self._condition_readonly_filter = None
        self._display_width = None
        self._id = None
        self._company_id = None
        self._application_id = None
        self._create_time = None
        self._update_time = None
        self._create_account_id = None
        self._create_account_name = None
        self._update_account_id = None
        self._update_account_name = None
        self._app_name = None
        self._app_color = None
        self._app_icon = None
        self._is_delete = None
        self.discriminator = None
        if table_id is not None:
            self.table_id = table_id
        if module_name is not None:
            self.module_name = module_name
        if name is not None:
            self.name = name
        if icon is not None:
            self.icon = icon
        if type is not None:
            self.type = type
        if group_id is not None:
            self.group_id = group_id
        if setting is not None:
            self.setting = setting
        if remark is not None:
            self.remark = remark
        if is_private_visible is not None:
            self.is_private_visible = is_private_visible
        if private_visible is not None:
            self.private_visible = private_visible
        if is_private_edit is not None:
            self.is_private_edit = is_private_edit
        if private_edit is not None:
            self.private_edit = private_edit
        if is_condition_visible is not None:
            self.is_condition_visible = is_condition_visible
        if condition_visible_filter is not None:
            self.condition_visible_filter = condition_visible_filter
        if is_condition_readonly is not None:
            self.is_condition_readonly = is_condition_readonly
        if condition_readonly_filter is not None:
            self.condition_readonly_filter = condition_readonly_filter
        if display_width is not None:
            self.display_width = display_width
        if id is not None:
            self.id = id
        if company_id is not None:
            self.company_id = company_id
        if application_id is not None:
            self.application_id = application_id
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if create_account_id is not None:
            self.create_account_id = create_account_id
        if create_account_name is not None:
            self.create_account_name = create_account_name
        if update_account_id is not None:
            self.update_account_id = update_account_id
        if update_account_name is not None:
            self.update_account_name = update_account_name
        if app_name is not None:
            self.app_name = app_name
        if app_color is not None:
            self.app_color = app_color
        if app_icon is not None:
            self.app_icon = app_icon
        if is_delete is not None:
            self.is_delete = is_delete

    @property
    def table_id(self):
        """Gets the table_id of this TableFieldVO.  # noqa: E501

        数据表ID  # noqa: E501

        :return: The table_id of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this TableFieldVO.

        数据表ID  # noqa: E501

        :param table_id: The table_id of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._table_id = table_id

    @property
    def module_name(self):
        """Gets the module_name of this TableFieldVO.  # noqa: E501

        数据表名称  # noqa: E501

        :return: The module_name of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this TableFieldVO.

        数据表名称  # noqa: E501

        :param module_name: The module_name of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._module_name = module_name

    @property
    def name(self):
        """Gets the name of this TableFieldVO.  # noqa: E501

        名称  # noqa: E501

        :return: The name of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableFieldVO.

        名称  # noqa: E501

        :param name: The name of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def icon(self):
        """Gets the icon of this TableFieldVO.  # noqa: E501

        图标  # noqa: E501

        :return: The icon of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this TableFieldVO.

        图标  # noqa: E501

        :param icon: The icon of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def type(self):
        """Gets the type of this TableFieldVO.  # noqa: E501

        字段类型  # noqa: E501

        :return: The type of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TableFieldVO.

        字段类型  # noqa: E501

        :param type: The type of this TableFieldVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Name", "SingleText", "MultiText", "RichText", "Attachment", "Checkbox", "SingleSelect", "MultiSelect", "Member", "Account", "Date", "Time", "Integer", "Double", "Rate", "Color", "Category", "Cascader", "Region", "Coordinate", "Children", "Relation", "RelationRollup", "RelationRecord", "RelationRecordField", "RelationRecordLookupList", "ID", "Formula", "CreateTime", "LastModifyTime", "CreateUser", "LastModifyUser", "StaticText", "IndexNumber", "Signature", "Department", "Custom", "RelationWiki"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def group_id(self):
        """Gets the group_id of this TableFieldVO.  # noqa: E501

        分组  # noqa: E501

        :return: The group_id of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this TableFieldVO.

        分组  # noqa: E501

        :param group_id: The group_id of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def setting(self):
        """Gets the setting of this TableFieldVO.  # noqa: E501

        配置信息  # noqa: E501

        :return: The setting of this TableFieldVO.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this TableFieldVO.

        配置信息  # noqa: E501

        :param setting: The setting of this TableFieldVO.  # noqa: E501
        :type: dict(str, object)
        """

        self._setting = setting

    @property
    def remark(self):
        """Gets the remark of this TableFieldVO.  # noqa: E501

        描述  # noqa: E501

        :return: The remark of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this TableFieldVO.

        描述  # noqa: E501

        :param remark: The remark of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def is_private_visible(self):
        """Gets the is_private_visible of this TableFieldVO.  # noqa: E501

        是否部分成员可见  # noqa: E501

        :return: The is_private_visible of this TableFieldVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_private_visible

    @is_private_visible.setter
    def is_private_visible(self, is_private_visible):
        """Sets the is_private_visible of this TableFieldVO.

        是否部分成员可见  # noqa: E501

        :param is_private_visible: The is_private_visible of this TableFieldVO.  # noqa: E501
        :type: bool
        """

        self._is_private_visible = is_private_visible

    @property
    def private_visible(self):
        """Gets the private_visible of this TableFieldVO.  # noqa: E501


        :return: The private_visible of this TableFieldVO.  # noqa: E501
        :rtype: AccessControl
        """
        return self._private_visible

    @private_visible.setter
    def private_visible(self, private_visible):
        """Sets the private_visible of this TableFieldVO.


        :param private_visible: The private_visible of this TableFieldVO.  # noqa: E501
        :type: AccessControl
        """

        self._private_visible = private_visible

    @property
    def is_private_edit(self):
        """Gets the is_private_edit of this TableFieldVO.  # noqa: E501

        是否部分成员可编辑  # noqa: E501

        :return: The is_private_edit of this TableFieldVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_private_edit

    @is_private_edit.setter
    def is_private_edit(self, is_private_edit):
        """Sets the is_private_edit of this TableFieldVO.

        是否部分成员可编辑  # noqa: E501

        :param is_private_edit: The is_private_edit of this TableFieldVO.  # noqa: E501
        :type: bool
        """

        self._is_private_edit = is_private_edit

    @property
    def private_edit(self):
        """Gets the private_edit of this TableFieldVO.  # noqa: E501


        :return: The private_edit of this TableFieldVO.  # noqa: E501
        :rtype: AccessControl
        """
        return self._private_edit

    @private_edit.setter
    def private_edit(self, private_edit):
        """Sets the private_edit of this TableFieldVO.


        :param private_edit: The private_edit of this TableFieldVO.  # noqa: E501
        :type: AccessControl
        """

        self._private_edit = private_edit

    @property
    def is_condition_visible(self):
        """Gets the is_condition_visible of this TableFieldVO.  # noqa: E501

        是否条件满足时显示  # noqa: E501

        :return: The is_condition_visible of this TableFieldVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_condition_visible

    @is_condition_visible.setter
    def is_condition_visible(self, is_condition_visible):
        """Sets the is_condition_visible of this TableFieldVO.

        是否条件满足时显示  # noqa: E501

        :param is_condition_visible: The is_condition_visible of this TableFieldVO.  # noqa: E501
        :type: bool
        """

        self._is_condition_visible = is_condition_visible

    @property
    def condition_visible_filter(self):
        """Gets the condition_visible_filter of this TableFieldVO.  # noqa: E501


        :return: The condition_visible_filter of this TableFieldVO.  # noqa: E501
        :rtype: FilterCondition
        """
        return self._condition_visible_filter

    @condition_visible_filter.setter
    def condition_visible_filter(self, condition_visible_filter):
        """Sets the condition_visible_filter of this TableFieldVO.


        :param condition_visible_filter: The condition_visible_filter of this TableFieldVO.  # noqa: E501
        :type: FilterCondition
        """

        self._condition_visible_filter = condition_visible_filter

    @property
    def is_condition_readonly(self):
        """Gets the is_condition_readonly of this TableFieldVO.  # noqa: E501

        条件只读  # noqa: E501

        :return: The is_condition_readonly of this TableFieldVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_condition_readonly

    @is_condition_readonly.setter
    def is_condition_readonly(self, is_condition_readonly):
        """Sets the is_condition_readonly of this TableFieldVO.

        条件只读  # noqa: E501

        :param is_condition_readonly: The is_condition_readonly of this TableFieldVO.  # noqa: E501
        :type: bool
        """

        self._is_condition_readonly = is_condition_readonly

    @property
    def condition_readonly_filter(self):
        """Gets the condition_readonly_filter of this TableFieldVO.  # noqa: E501


        :return: The condition_readonly_filter of this TableFieldVO.  # noqa: E501
        :rtype: FilterCondition
        """
        return self._condition_readonly_filter

    @condition_readonly_filter.setter
    def condition_readonly_filter(self, condition_readonly_filter):
        """Sets the condition_readonly_filter of this TableFieldVO.


        :param condition_readonly_filter: The condition_readonly_filter of this TableFieldVO.  # noqa: E501
        :type: FilterCondition
        """

        self._condition_readonly_filter = condition_readonly_filter

    @property
    def display_width(self):
        """Gets the display_width of this TableFieldVO.  # noqa: E501

        显示宽度  # noqa: E501

        :return: The display_width of this TableFieldVO.  # noqa: E501
        :rtype: int
        """
        return self._display_width

    @display_width.setter
    def display_width(self, display_width):
        """Sets the display_width of this TableFieldVO.

        显示宽度  # noqa: E501

        :param display_width: The display_width of this TableFieldVO.  # noqa: E501
        :type: int
        """

        self._display_width = display_width

    @property
    def id(self):
        """Gets the id of this TableFieldVO.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TableFieldVO.

        ID  # noqa: E501

        :param id: The id of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this TableFieldVO.  # noqa: E501

        团队ID  # noqa: E501

        :return: The company_id of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this TableFieldVO.

        团队ID  # noqa: E501

        :param company_id: The company_id of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def application_id(self):
        """Gets the application_id of this TableFieldVO.  # noqa: E501

        应用ID  # noqa: E501

        :return: The application_id of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this TableFieldVO.

        应用ID  # noqa: E501

        :param application_id: The application_id of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def create_time(self):
        """Gets the create_time of this TableFieldVO.  # noqa: E501

        创建时间  # noqa: E501

        :return: The create_time of this TableFieldVO.  # noqa: E501
        :rtype: float
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TableFieldVO.

        创建时间  # noqa: E501

        :param create_time: The create_time of this TableFieldVO.  # noqa: E501
        :type: float
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this TableFieldVO.  # noqa: E501

        最后更新时间  # noqa: E501

        :return: The update_time of this TableFieldVO.  # noqa: E501
        :rtype: float
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TableFieldVO.

        最后更新时间  # noqa: E501

        :param update_time: The update_time of this TableFieldVO.  # noqa: E501
        :type: float
        """

        self._update_time = update_time

    @property
    def create_account_id(self):
        """Gets the create_account_id of this TableFieldVO.  # noqa: E501

        创建人ID  # noqa: E501

        :return: The create_account_id of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._create_account_id

    @create_account_id.setter
    def create_account_id(self, create_account_id):
        """Sets the create_account_id of this TableFieldVO.

        创建人ID  # noqa: E501

        :param create_account_id: The create_account_id of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._create_account_id = create_account_id

    @property
    def create_account_name(self):
        """Gets the create_account_name of this TableFieldVO.  # noqa: E501

        创建人名称  # noqa: E501

        :return: The create_account_name of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._create_account_name

    @create_account_name.setter
    def create_account_name(self, create_account_name):
        """Sets the create_account_name of this TableFieldVO.

        创建人名称  # noqa: E501

        :param create_account_name: The create_account_name of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._create_account_name = create_account_name

    @property
    def update_account_id(self):
        """Gets the update_account_id of this TableFieldVO.  # noqa: E501

        最后更新人ID  # noqa: E501

        :return: The update_account_id of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._update_account_id

    @update_account_id.setter
    def update_account_id(self, update_account_id):
        """Sets the update_account_id of this TableFieldVO.

        最后更新人ID  # noqa: E501

        :param update_account_id: The update_account_id of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._update_account_id = update_account_id

    @property
    def update_account_name(self):
        """Gets the update_account_name of this TableFieldVO.  # noqa: E501

        最后更新人名称  # noqa: E501

        :return: The update_account_name of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._update_account_name

    @update_account_name.setter
    def update_account_name(self, update_account_name):
        """Sets the update_account_name of this TableFieldVO.

        最后更新人名称  # noqa: E501

        :param update_account_name: The update_account_name of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._update_account_name = update_account_name

    @property
    def app_name(self):
        """Gets the app_name of this TableFieldVO.  # noqa: E501

        应用名称  # noqa: E501

        :return: The app_name of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this TableFieldVO.

        应用名称  # noqa: E501

        :param app_name: The app_name of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_color(self):
        """Gets the app_color of this TableFieldVO.  # noqa: E501

        应用颜色  # noqa: E501

        :return: The app_color of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._app_color

    @app_color.setter
    def app_color(self, app_color):
        """Sets the app_color of this TableFieldVO.

        应用颜色  # noqa: E501

        :param app_color: The app_color of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._app_color = app_color

    @property
    def app_icon(self):
        """Gets the app_icon of this TableFieldVO.  # noqa: E501

        应用图标  # noqa: E501

        :return: The app_icon of this TableFieldVO.  # noqa: E501
        :rtype: str
        """
        return self._app_icon

    @app_icon.setter
    def app_icon(self, app_icon):
        """Sets the app_icon of this TableFieldVO.

        应用图标  # noqa: E501

        :param app_icon: The app_icon of this TableFieldVO.  # noqa: E501
        :type: str
        """

        self._app_icon = app_icon

    @property
    def is_delete(self):
        """Gets the is_delete of this TableFieldVO.  # noqa: E501

        是否已删除  # noqa: E501

        :return: The is_delete of this TableFieldVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_delete

    @is_delete.setter
    def is_delete(self, is_delete):
        """Sets the is_delete of this TableFieldVO.

        是否已删除  # noqa: E501

        :param is_delete: The is_delete of this TableFieldVO.  # noqa: E501
        :type: bool
        """

        self._is_delete = is_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableFieldVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableFieldVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
