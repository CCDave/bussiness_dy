# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableWorkflowInstanceNodeOwnerTransferRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_id': 'str',
        'node_owner_id': 'str',
        'transfer_comment': 'str',
        'account_id_list': 'list[object]'
    }

    attribute_map = {
        'instance_id': 'instanceId',
        'node_owner_id': 'nodeOwnerId',
        'transfer_comment': 'transferComment',
        'account_id_list': 'accountIdList'
    }

    def __init__(self, instance_id=None, node_owner_id=None, transfer_comment=None, account_id_list=None):  # noqa: E501
        """TableWorkflowInstanceNodeOwnerTransferRequest - a model defined in Swagger"""  # noqa: E501
        self._instance_id = None
        self._node_owner_id = None
        self._transfer_comment = None
        self._account_id_list = None
        self.discriminator = None
        self.instance_id = instance_id
        self.node_owner_id = node_owner_id
        if transfer_comment is not None:
            self.transfer_comment = transfer_comment
        self.account_id_list = account_id_list

    @property
    def instance_id(self):
        """Gets the instance_id of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501

        流程实例ID  # noqa: E501

        :return: The instance_id of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this TableWorkflowInstanceNodeOwnerTransferRequest.

        流程实例ID  # noqa: E501

        :param instance_id: The instance_id of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501
        :type: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def node_owner_id(self):
        """Gets the node_owner_id of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501

        流程实例节点ID  # noqa: E501

        :return: The node_owner_id of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._node_owner_id

    @node_owner_id.setter
    def node_owner_id(self, node_owner_id):
        """Sets the node_owner_id of this TableWorkflowInstanceNodeOwnerTransferRequest.

        流程实例节点ID  # noqa: E501

        :param node_owner_id: The node_owner_id of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501
        :type: str
        """
        if node_owner_id is None:
            raise ValueError("Invalid value for `node_owner_id`, must not be `None`")  # noqa: E501

        self._node_owner_id = node_owner_id

    @property
    def transfer_comment(self):
        """Gets the transfer_comment of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501

        转交意见  # noqa: E501

        :return: The transfer_comment of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._transfer_comment

    @transfer_comment.setter
    def transfer_comment(self, transfer_comment):
        """Sets the transfer_comment of this TableWorkflowInstanceNodeOwnerTransferRequest.

        转交意见  # noqa: E501

        :param transfer_comment: The transfer_comment of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501
        :type: str
        """

        self._transfer_comment = transfer_comment

    @property
    def account_id_list(self):
        """Gets the account_id_list of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501

        审批人列表  # noqa: E501

        :return: The account_id_list of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._account_id_list

    @account_id_list.setter
    def account_id_list(self, account_id_list):
        """Sets the account_id_list of this TableWorkflowInstanceNodeOwnerTransferRequest.

        审批人列表  # noqa: E501

        :param account_id_list: The account_id_list of this TableWorkflowInstanceNodeOwnerTransferRequest.  # noqa: E501
        :type: list[object]
        """
        if account_id_list is None:
            raise ValueError("Invalid value for `account_id_list`, must not be `None`")  # noqa: E501

        self._account_id_list = account_id_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableWorkflowInstanceNodeOwnerTransferRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableWorkflowInstanceNodeOwnerTransferRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
