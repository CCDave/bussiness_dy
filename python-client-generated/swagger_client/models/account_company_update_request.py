# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountCompanyUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'company_name': 'str',
        'max_member_num': 'int',
        'expire_date': 'float'
    }

    attribute_map = {
        'id': 'id',
        'company_name': 'companyName',
        'max_member_num': 'maxMemberNum',
        'expire_date': 'expireDate'
    }

    def __init__(self, id=None, company_name=None, max_member_num=None, expire_date=None):  # noqa: E501
        """AccountCompanyUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._company_name = None
        self._max_member_num = None
        self._expire_date = None
        self.discriminator = None
        self.id = id
        self.company_name = company_name
        self.max_member_num = max_member_num
        self.expire_date = expire_date

    @property
    def id(self):
        """Gets the id of this AccountCompanyUpdateRequest.  # noqa: E501

        团队id  # noqa: E501

        :return: The id of this AccountCompanyUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountCompanyUpdateRequest.

        团队id  # noqa: E501

        :param id: The id of this AccountCompanyUpdateRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def company_name(self):
        """Gets the company_name of this AccountCompanyUpdateRequest.  # noqa: E501

        团队名称  # noqa: E501

        :return: The company_name of this AccountCompanyUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AccountCompanyUpdateRequest.

        团队名称  # noqa: E501

        :param company_name: The company_name of this AccountCompanyUpdateRequest.  # noqa: E501
        :type: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def max_member_num(self):
        """Gets the max_member_num of this AccountCompanyUpdateRequest.  # noqa: E501

        最大用户数  # noqa: E501

        :return: The max_member_num of this AccountCompanyUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_member_num

    @max_member_num.setter
    def max_member_num(self, max_member_num):
        """Sets the max_member_num of this AccountCompanyUpdateRequest.

        最大用户数  # noqa: E501

        :param max_member_num: The max_member_num of this AccountCompanyUpdateRequest.  # noqa: E501
        :type: int
        """
        if max_member_num is None:
            raise ValueError("Invalid value for `max_member_num`, must not be `None`")  # noqa: E501

        self._max_member_num = max_member_num

    @property
    def expire_date(self):
        """Gets the expire_date of this AccountCompanyUpdateRequest.  # noqa: E501

        过期时间  # noqa: E501

        :return: The expire_date of this AccountCompanyUpdateRequest.  # noqa: E501
        :rtype: float
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this AccountCompanyUpdateRequest.

        过期时间  # noqa: E501

        :param expire_date: The expire_date of this AccountCompanyUpdateRequest.  # noqa: E501
        :type: float
        """
        if expire_date is None:
            raise ValueError("Invalid value for `expire_date`, must not be `None`")  # noqa: E501

        self._expire_date = expire_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountCompanyUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCompanyUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
