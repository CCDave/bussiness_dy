# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompanyDepartmentVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'company_id': 'str',
        'name': 'str',
        'parent_id': 'str',
        'level': 'int',
        'remark': 'str',
        'owner_id_list': 'list[object]'
    }

    attribute_map = {
        'id': 'id',
        'company_id': 'companyId',
        'name': 'name',
        'parent_id': 'parentId',
        'level': 'level',
        'remark': 'remark',
        'owner_id_list': 'ownerIdList'
    }

    def __init__(self, id=None, company_id=None, name=None, parent_id=None, level=None, remark=None, owner_id_list=None):  # noqa: E501
        """CompanyDepartmentVO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._company_id = None
        self._name = None
        self._parent_id = None
        self._level = None
        self._remark = None
        self._owner_id_list = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if company_id is not None:
            self.company_id = company_id
        if name is not None:
            self.name = name
        if parent_id is not None:
            self.parent_id = parent_id
        if level is not None:
            self.level = level
        if remark is not None:
            self.remark = remark
        if owner_id_list is not None:
            self.owner_id_list = owner_id_list

    @property
    def id(self):
        """Gets the id of this CompanyDepartmentVO.  # noqa: E501

        id  # noqa: E501

        :return: The id of this CompanyDepartmentVO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyDepartmentVO.

        id  # noqa: E501

        :param id: The id of this CompanyDepartmentVO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this CompanyDepartmentVO.  # noqa: E501

        公司ID  # noqa: E501

        :return: The company_id of this CompanyDepartmentVO.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanyDepartmentVO.

        公司ID  # noqa: E501

        :param company_id: The company_id of this CompanyDepartmentVO.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def name(self):
        """Gets the name of this CompanyDepartmentVO.  # noqa: E501

        部门名称  # noqa: E501

        :return: The name of this CompanyDepartmentVO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyDepartmentVO.

        部门名称  # noqa: E501

        :param name: The name of this CompanyDepartmentVO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this CompanyDepartmentVO.  # noqa: E501

        父部门ID  # noqa: E501

        :return: The parent_id of this CompanyDepartmentVO.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CompanyDepartmentVO.

        父部门ID  # noqa: E501

        :param parent_id: The parent_id of this CompanyDepartmentVO.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def level(self):
        """Gets the level of this CompanyDepartmentVO.  # noqa: E501

        部门层级  # noqa: E501

        :return: The level of this CompanyDepartmentVO.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CompanyDepartmentVO.

        部门层级  # noqa: E501

        :param level: The level of this CompanyDepartmentVO.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def remark(self):
        """Gets the remark of this CompanyDepartmentVO.  # noqa: E501

        备注  # noqa: E501

        :return: The remark of this CompanyDepartmentVO.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this CompanyDepartmentVO.

        备注  # noqa: E501

        :param remark: The remark of this CompanyDepartmentVO.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def owner_id_list(self):
        """Gets the owner_id_list of this CompanyDepartmentVO.  # noqa: E501

        部门所有人ID列表  # noqa: E501

        :return: The owner_id_list of this CompanyDepartmentVO.  # noqa: E501
        :rtype: list[object]
        """
        return self._owner_id_list

    @owner_id_list.setter
    def owner_id_list(self, owner_id_list):
        """Sets the owner_id_list of this CompanyDepartmentVO.

        部门所有人ID列表  # noqa: E501

        :param owner_id_list: The owner_id_list of this CompanyDepartmentVO.  # noqa: E501
        :type: list[object]
        """

        self._owner_id_list = owner_id_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyDepartmentVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyDepartmentVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
