# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationMemberVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'role_id_list': 'list[object]',
        'group_id_list': 'list[object]',
        'account_name': 'str',
        'account_avatar': 'str',
        'account_hint': 'str',
        'account_remark': 'str',
        'id': 'str',
        'company_id': 'str',
        'application_id': 'str',
        'create_time': 'float',
        'update_time': 'float',
        'create_account_id': 'str',
        'create_account_name': 'str',
        'update_account_id': 'str',
        'update_account_name': 'str',
        'app_name': 'str',
        'app_color': 'str',
        'app_icon': 'str',
        'is_delete': 'bool'
    }

    attribute_map = {
        'account_id': 'accountId',
        'role_id_list': 'roleIdList',
        'group_id_list': 'groupIdList',
        'account_name': 'accountName',
        'account_avatar': 'accountAvatar',
        'account_hint': 'accountHint',
        'account_remark': 'accountRemark',
        'id': 'id',
        'company_id': 'companyId',
        'application_id': 'applicationId',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'create_account_id': 'createAccountId',
        'create_account_name': 'createAccountName',
        'update_account_id': 'updateAccountId',
        'update_account_name': 'updateAccountName',
        'app_name': 'appName',
        'app_color': 'appColor',
        'app_icon': 'appIcon',
        'is_delete': 'isDelete'
    }

    def __init__(self, account_id=None, role_id_list=None, group_id_list=None, account_name=None, account_avatar=None, account_hint=None, account_remark=None, id=None, company_id=None, application_id=None, create_time=None, update_time=None, create_account_id=None, create_account_name=None, update_account_id=None, update_account_name=None, app_name=None, app_color=None, app_icon=None, is_delete=None):  # noqa: E501
        """ApplicationMemberVO - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._role_id_list = None
        self._group_id_list = None
        self._account_name = None
        self._account_avatar = None
        self._account_hint = None
        self._account_remark = None
        self._id = None
        self._company_id = None
        self._application_id = None
        self._create_time = None
        self._update_time = None
        self._create_account_id = None
        self._create_account_name = None
        self._update_account_id = None
        self._update_account_name = None
        self._app_name = None
        self._app_color = None
        self._app_icon = None
        self._is_delete = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if role_id_list is not None:
            self.role_id_list = role_id_list
        if group_id_list is not None:
            self.group_id_list = group_id_list
        if account_name is not None:
            self.account_name = account_name
        if account_avatar is not None:
            self.account_avatar = account_avatar
        if account_hint is not None:
            self.account_hint = account_hint
        if account_remark is not None:
            self.account_remark = account_remark
        if id is not None:
            self.id = id
        if company_id is not None:
            self.company_id = company_id
        if application_id is not None:
            self.application_id = application_id
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if create_account_id is not None:
            self.create_account_id = create_account_id
        if create_account_name is not None:
            self.create_account_name = create_account_name
        if update_account_id is not None:
            self.update_account_id = update_account_id
        if update_account_name is not None:
            self.update_account_name = update_account_name
        if app_name is not None:
            self.app_name = app_name
        if app_color is not None:
            self.app_color = app_color
        if app_icon is not None:
            self.app_icon = app_icon
        if is_delete is not None:
            self.is_delete = is_delete

    @property
    def account_id(self):
        """Gets the account_id of this ApplicationMemberVO.  # noqa: E501

        账号ID  # noqa: E501

        :return: The account_id of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ApplicationMemberVO.

        账号ID  # noqa: E501

        :param account_id: The account_id of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def role_id_list(self):
        """Gets the role_id_list of this ApplicationMemberVO.  # noqa: E501

        应用角色ID列表  # noqa: E501

        :return: The role_id_list of this ApplicationMemberVO.  # noqa: E501
        :rtype: list[object]
        """
        return self._role_id_list

    @role_id_list.setter
    def role_id_list(self, role_id_list):
        """Sets the role_id_list of this ApplicationMemberVO.

        应用角色ID列表  # noqa: E501

        :param role_id_list: The role_id_list of this ApplicationMemberVO.  # noqa: E501
        :type: list[object]
        """

        self._role_id_list = role_id_list

    @property
    def group_id_list(self):
        """Gets the group_id_list of this ApplicationMemberVO.  # noqa: E501

        分组ID列表  # noqa: E501

        :return: The group_id_list of this ApplicationMemberVO.  # noqa: E501
        :rtype: list[object]
        """
        return self._group_id_list

    @group_id_list.setter
    def group_id_list(self, group_id_list):
        """Sets the group_id_list of this ApplicationMemberVO.

        分组ID列表  # noqa: E501

        :param group_id_list: The group_id_list of this ApplicationMemberVO.  # noqa: E501
        :type: list[object]
        """

        self._group_id_list = group_id_list

    @property
    def account_name(self):
        """Gets the account_name of this ApplicationMemberVO.  # noqa: E501

        账号名称  # noqa: E501

        :return: The account_name of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this ApplicationMemberVO.

        账号名称  # noqa: E501

        :param account_name: The account_name of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_avatar(self):
        """Gets the account_avatar of this ApplicationMemberVO.  # noqa: E501

        账号头像  # noqa: E501

        :return: The account_avatar of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._account_avatar

    @account_avatar.setter
    def account_avatar(self, account_avatar):
        """Sets the account_avatar of this ApplicationMemberVO.

        账号头像  # noqa: E501

        :param account_avatar: The account_avatar of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._account_avatar = account_avatar

    @property
    def account_hint(self):
        """Gets the account_hint of this ApplicationMemberVO.  # noqa: E501

        账号hint  # noqa: E501

        :return: The account_hint of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._account_hint

    @account_hint.setter
    def account_hint(self, account_hint):
        """Sets the account_hint of this ApplicationMemberVO.

        账号hint  # noqa: E501

        :param account_hint: The account_hint of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._account_hint = account_hint

    @property
    def account_remark(self):
        """Gets the account_remark of this ApplicationMemberVO.  # noqa: E501

        账号描述  # noqa: E501

        :return: The account_remark of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._account_remark

    @account_remark.setter
    def account_remark(self, account_remark):
        """Sets the account_remark of this ApplicationMemberVO.

        账号描述  # noqa: E501

        :param account_remark: The account_remark of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._account_remark = account_remark

    @property
    def id(self):
        """Gets the id of this ApplicationMemberVO.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationMemberVO.

        ID  # noqa: E501

        :param id: The id of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this ApplicationMemberVO.  # noqa: E501

        团队ID  # noqa: E501

        :return: The company_id of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ApplicationMemberVO.

        团队ID  # noqa: E501

        :param company_id: The company_id of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationMemberVO.  # noqa: E501

        应用ID  # noqa: E501

        :return: The application_id of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationMemberVO.

        应用ID  # noqa: E501

        :param application_id: The application_id of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def create_time(self):
        """Gets the create_time of this ApplicationMemberVO.  # noqa: E501

        创建时间  # noqa: E501

        :return: The create_time of this ApplicationMemberVO.  # noqa: E501
        :rtype: float
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApplicationMemberVO.

        创建时间  # noqa: E501

        :param create_time: The create_time of this ApplicationMemberVO.  # noqa: E501
        :type: float
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this ApplicationMemberVO.  # noqa: E501

        最后更新时间  # noqa: E501

        :return: The update_time of this ApplicationMemberVO.  # noqa: E501
        :rtype: float
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ApplicationMemberVO.

        最后更新时间  # noqa: E501

        :param update_time: The update_time of this ApplicationMemberVO.  # noqa: E501
        :type: float
        """

        self._update_time = update_time

    @property
    def create_account_id(self):
        """Gets the create_account_id of this ApplicationMemberVO.  # noqa: E501

        创建人ID  # noqa: E501

        :return: The create_account_id of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._create_account_id

    @create_account_id.setter
    def create_account_id(self, create_account_id):
        """Sets the create_account_id of this ApplicationMemberVO.

        创建人ID  # noqa: E501

        :param create_account_id: The create_account_id of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._create_account_id = create_account_id

    @property
    def create_account_name(self):
        """Gets the create_account_name of this ApplicationMemberVO.  # noqa: E501

        创建人名称  # noqa: E501

        :return: The create_account_name of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._create_account_name

    @create_account_name.setter
    def create_account_name(self, create_account_name):
        """Sets the create_account_name of this ApplicationMemberVO.

        创建人名称  # noqa: E501

        :param create_account_name: The create_account_name of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._create_account_name = create_account_name

    @property
    def update_account_id(self):
        """Gets the update_account_id of this ApplicationMemberVO.  # noqa: E501

        最后更新人ID  # noqa: E501

        :return: The update_account_id of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._update_account_id

    @update_account_id.setter
    def update_account_id(self, update_account_id):
        """Sets the update_account_id of this ApplicationMemberVO.

        最后更新人ID  # noqa: E501

        :param update_account_id: The update_account_id of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._update_account_id = update_account_id

    @property
    def update_account_name(self):
        """Gets the update_account_name of this ApplicationMemberVO.  # noqa: E501

        最后更新人名称  # noqa: E501

        :return: The update_account_name of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._update_account_name

    @update_account_name.setter
    def update_account_name(self, update_account_name):
        """Sets the update_account_name of this ApplicationMemberVO.

        最后更新人名称  # noqa: E501

        :param update_account_name: The update_account_name of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._update_account_name = update_account_name

    @property
    def app_name(self):
        """Gets the app_name of this ApplicationMemberVO.  # noqa: E501

        应用名称  # noqa: E501

        :return: The app_name of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this ApplicationMemberVO.

        应用名称  # noqa: E501

        :param app_name: The app_name of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_color(self):
        """Gets the app_color of this ApplicationMemberVO.  # noqa: E501

        应用颜色  # noqa: E501

        :return: The app_color of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._app_color

    @app_color.setter
    def app_color(self, app_color):
        """Sets the app_color of this ApplicationMemberVO.

        应用颜色  # noqa: E501

        :param app_color: The app_color of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._app_color = app_color

    @property
    def app_icon(self):
        """Gets the app_icon of this ApplicationMemberVO.  # noqa: E501

        应用图标  # noqa: E501

        :return: The app_icon of this ApplicationMemberVO.  # noqa: E501
        :rtype: str
        """
        return self._app_icon

    @app_icon.setter
    def app_icon(self, app_icon):
        """Sets the app_icon of this ApplicationMemberVO.

        应用图标  # noqa: E501

        :param app_icon: The app_icon of this ApplicationMemberVO.  # noqa: E501
        :type: str
        """

        self._app_icon = app_icon

    @property
    def is_delete(self):
        """Gets the is_delete of this ApplicationMemberVO.  # noqa: E501

        是否已删除  # noqa: E501

        :return: The is_delete of this ApplicationMemberVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_delete

    @is_delete.setter
    def is_delete(self, is_delete):
        """Sets the is_delete of this ApplicationMemberVO.

        是否已删除  # noqa: E501

        :param is_delete: The is_delete of this ApplicationMemberVO.  # noqa: E501
        :type: bool
        """

        self._is_delete = is_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationMemberVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationMemberVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
