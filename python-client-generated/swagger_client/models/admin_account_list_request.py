# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdminAccountListRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_id': 'str',
        'user_name': 'str',
        'id': 'str',
        'oid': 'str',
        'id_in_list': 'list[object]',
        'mobile_no': 'str',
        'email': 'str',
        'create_time_start': 'float',
        'create_time_end': 'float',
        'update_time_start': 'float',
        'update_time_end': 'float',
        'page_size': 'int',
        'page_index': 'int'
    }

    attribute_map = {
        'company_id': 'companyId',
        'user_name': 'userName',
        'id': 'id',
        'oid': 'oid',
        'id_in_list': 'idInList',
        'mobile_no': 'mobileNo',
        'email': 'email',
        'create_time_start': 'createTimeStart',
        'create_time_end': 'createTimeEnd',
        'update_time_start': 'updateTimeStart',
        'update_time_end': 'updateTimeEnd',
        'page_size': 'pageSize',
        'page_index': 'pageIndex'
    }

    def __init__(self, company_id=None, user_name=None, id=None, oid=None, id_in_list=None, mobile_no=None, email=None, create_time_start=None, create_time_end=None, update_time_start=None, update_time_end=None, page_size=None, page_index=None):  # noqa: E501
        """AdminAccountListRequest - a model defined in Swagger"""  # noqa: E501
        self._company_id = None
        self._user_name = None
        self._id = None
        self._oid = None
        self._id_in_list = None
        self._mobile_no = None
        self._email = None
        self._create_time_start = None
        self._create_time_end = None
        self._update_time_start = None
        self._update_time_end = None
        self._page_size = None
        self._page_index = None
        self.discriminator = None
        if company_id is not None:
            self.company_id = company_id
        if user_name is not None:
            self.user_name = user_name
        if id is not None:
            self.id = id
        if oid is not None:
            self.oid = oid
        if id_in_list is not None:
            self.id_in_list = id_in_list
        if mobile_no is not None:
            self.mobile_no = mobile_no
        if email is not None:
            self.email = email
        if create_time_start is not None:
            self.create_time_start = create_time_start
        if create_time_end is not None:
            self.create_time_end = create_time_end
        if update_time_start is not None:
            self.update_time_start = update_time_start
        if update_time_end is not None:
            self.update_time_end = update_time_end
        if page_size is not None:
            self.page_size = page_size
        if page_index is not None:
            self.page_index = page_index

    @property
    def company_id(self):
        """Gets the company_id of this AdminAccountListRequest.  # noqa: E501

        团队ID  # noqa: E501

        :return: The company_id of this AdminAccountListRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this AdminAccountListRequest.

        团队ID  # noqa: E501

        :param company_id: The company_id of this AdminAccountListRequest.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def user_name(self):
        """Gets the user_name of this AdminAccountListRequest.  # noqa: E501

        用户名  # noqa: E501

        :return: The user_name of this AdminAccountListRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AdminAccountListRequest.

        用户名  # noqa: E501

        :param user_name: The user_name of this AdminAccountListRequest.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def id(self):
        """Gets the id of this AdminAccountListRequest.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this AdminAccountListRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdminAccountListRequest.

        ID  # noqa: E501

        :param id: The id of this AdminAccountListRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def oid(self):
        """Gets the oid of this AdminAccountListRequest.  # noqa: E501

        OID  # noqa: E501

        :return: The oid of this AdminAccountListRequest.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this AdminAccountListRequest.

        OID  # noqa: E501

        :param oid: The oid of this AdminAccountListRequest.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def id_in_list(self):
        """Gets the id_in_list of this AdminAccountListRequest.  # noqa: E501

        ID列表  # noqa: E501

        :return: The id_in_list of this AdminAccountListRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._id_in_list

    @id_in_list.setter
    def id_in_list(self, id_in_list):
        """Sets the id_in_list of this AdminAccountListRequest.

        ID列表  # noqa: E501

        :param id_in_list: The id_in_list of this AdminAccountListRequest.  # noqa: E501
        :type: list[object]
        """

        self._id_in_list = id_in_list

    @property
    def mobile_no(self):
        """Gets the mobile_no of this AdminAccountListRequest.  # noqa: E501

        手机号  # noqa: E501

        :return: The mobile_no of this AdminAccountListRequest.  # noqa: E501
        :rtype: str
        """
        return self._mobile_no

    @mobile_no.setter
    def mobile_no(self, mobile_no):
        """Sets the mobile_no of this AdminAccountListRequest.

        手机号  # noqa: E501

        :param mobile_no: The mobile_no of this AdminAccountListRequest.  # noqa: E501
        :type: str
        """

        self._mobile_no = mobile_no

    @property
    def email(self):
        """Gets the email of this AdminAccountListRequest.  # noqa: E501

        邮箱  # noqa: E501

        :return: The email of this AdminAccountListRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AdminAccountListRequest.

        邮箱  # noqa: E501

        :param email: The email of this AdminAccountListRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def create_time_start(self):
        """Gets the create_time_start of this AdminAccountListRequest.  # noqa: E501

        创建时间起始值  # noqa: E501

        :return: The create_time_start of this AdminAccountListRequest.  # noqa: E501
        :rtype: float
        """
        return self._create_time_start

    @create_time_start.setter
    def create_time_start(self, create_time_start):
        """Sets the create_time_start of this AdminAccountListRequest.

        创建时间起始值  # noqa: E501

        :param create_time_start: The create_time_start of this AdminAccountListRequest.  # noqa: E501
        :type: float
        """

        self._create_time_start = create_time_start

    @property
    def create_time_end(self):
        """Gets the create_time_end of this AdminAccountListRequest.  # noqa: E501

        创建时间结束值  # noqa: E501

        :return: The create_time_end of this AdminAccountListRequest.  # noqa: E501
        :rtype: float
        """
        return self._create_time_end

    @create_time_end.setter
    def create_time_end(self, create_time_end):
        """Sets the create_time_end of this AdminAccountListRequest.

        创建时间结束值  # noqa: E501

        :param create_time_end: The create_time_end of this AdminAccountListRequest.  # noqa: E501
        :type: float
        """

        self._create_time_end = create_time_end

    @property
    def update_time_start(self):
        """Gets the update_time_start of this AdminAccountListRequest.  # noqa: E501

        最后更新时间起始值  # noqa: E501

        :return: The update_time_start of this AdminAccountListRequest.  # noqa: E501
        :rtype: float
        """
        return self._update_time_start

    @update_time_start.setter
    def update_time_start(self, update_time_start):
        """Sets the update_time_start of this AdminAccountListRequest.

        最后更新时间起始值  # noqa: E501

        :param update_time_start: The update_time_start of this AdminAccountListRequest.  # noqa: E501
        :type: float
        """

        self._update_time_start = update_time_start

    @property
    def update_time_end(self):
        """Gets the update_time_end of this AdminAccountListRequest.  # noqa: E501

        最后更新时间结束值  # noqa: E501

        :return: The update_time_end of this AdminAccountListRequest.  # noqa: E501
        :rtype: float
        """
        return self._update_time_end

    @update_time_end.setter
    def update_time_end(self, update_time_end):
        """Sets the update_time_end of this AdminAccountListRequest.

        最后更新时间结束值  # noqa: E501

        :param update_time_end: The update_time_end of this AdminAccountListRequest.  # noqa: E501
        :type: float
        """

        self._update_time_end = update_time_end

    @property
    def page_size(self):
        """Gets the page_size of this AdminAccountListRequest.  # noqa: E501

        每页数量  # noqa: E501

        :return: The page_size of this AdminAccountListRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this AdminAccountListRequest.

        每页数量  # noqa: E501

        :param page_size: The page_size of this AdminAccountListRequest.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page_index(self):
        """Gets the page_index of this AdminAccountListRequest.  # noqa: E501

        页码  # noqa: E501

        :return: The page_index of this AdminAccountListRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_index

    @page_index.setter
    def page_index(self, page_index):
        """Sets the page_index of this AdminAccountListRequest.

        页码  # noqa: E501

        :param page_index: The page_index of this AdminAccountListRequest.  # noqa: E501
        :type: int
        """

        self._page_index = page_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminAccountListRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminAccountListRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
