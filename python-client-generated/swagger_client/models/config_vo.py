# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'value': 'str',
        'value_type': 'str',
        'description': 'str',
        'test': 'bool',
        'is_hidden': 'bool',
        'create_time': 'float',
        'update_time': 'float'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'value_type': 'valueType',
        'description': 'description',
        'test': 'test',
        'is_hidden': 'isHidden',
        'create_time': 'createTime',
        'update_time': 'updateTime'
    }

    def __init__(self, id=None, value=None, value_type=None, description=None, test=None, is_hidden=None, create_time=None, update_time=None):  # noqa: E501
        """ConfigVO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._value = None
        self._value_type = None
        self._description = None
        self._test = None
        self._is_hidden = None
        self._create_time = None
        self._update_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if value_type is not None:
            self.value_type = value_type
        if description is not None:
            self.description = description
        if test is not None:
            self.test = test
        if is_hidden is not None:
            self.is_hidden = is_hidden
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time

    @property
    def id(self):
        """Gets the id of this ConfigVO.  # noqa: E501

        名称  # noqa: E501

        :return: The id of this ConfigVO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigVO.

        名称  # noqa: E501

        :param id: The id of this ConfigVO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this ConfigVO.  # noqa: E501

        参数值  # noqa: E501

        :return: The value of this ConfigVO.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConfigVO.

        参数值  # noqa: E501

        :param value: The value of this ConfigVO.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_type(self):
        """Gets the value_type of this ConfigVO.  # noqa: E501

        值类型  # noqa: E501

        :return: The value_type of this ConfigVO.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this ConfigVO.

        值类型  # noqa: E501

        :param value_type: The value_type of this ConfigVO.  # noqa: E501
        :type: str
        """

        self._value_type = value_type

    @property
    def description(self):
        """Gets the description of this ConfigVO.  # noqa: E501

        描述  # noqa: E501

        :return: The description of this ConfigVO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigVO.

        描述  # noqa: E501

        :param description: The description of this ConfigVO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def test(self):
        """Gets the test of this ConfigVO.  # noqa: E501

        是否可测试  # noqa: E501

        :return: The test of this ConfigVO.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this ConfigVO.

        是否可测试  # noqa: E501

        :param test: The test of this ConfigVO.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def is_hidden(self):
        """Gets the is_hidden of this ConfigVO.  # noqa: E501

        是否隐藏  # noqa: E501

        :return: The is_hidden of this ConfigVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this ConfigVO.

        是否隐藏  # noqa: E501

        :param is_hidden: The is_hidden of this ConfigVO.  # noqa: E501
        :type: bool
        """

        self._is_hidden = is_hidden

    @property
    def create_time(self):
        """Gets the create_time of this ConfigVO.  # noqa: E501

        创建时间  # noqa: E501

        :return: The create_time of this ConfigVO.  # noqa: E501
        :rtype: float
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ConfigVO.

        创建时间  # noqa: E501

        :param create_time: The create_time of this ConfigVO.  # noqa: E501
        :type: float
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this ConfigVO.  # noqa: E501

        更新时间  # noqa: E501

        :return: The update_time of this ConfigVO.  # noqa: E501
        :rtype: float
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ConfigVO.

        更新时间  # noqa: E501

        :param update_time: The update_time of this ConfigVO.  # noqa: E501
        :type: float
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
