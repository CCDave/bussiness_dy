# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompanyVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'avatar': 'str',
        'name': 'str',
        'version': 'str',
        'expire_date': 'float',
        'max_member_num': 'int',
        'max_application_num': 'int'
    }

    attribute_map = {
        'id': 'id',
        'avatar': 'avatar',
        'name': 'name',
        'version': 'version',
        'expire_date': 'expireDate',
        'max_member_num': 'maxMemberNum',
        'max_application_num': 'maxApplicationNum'
    }

    def __init__(self, id=None, avatar=None, name=None, version=None, expire_date=None, max_member_num=None, max_application_num=None):  # noqa: E501
        """CompanyVO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._avatar = None
        self._name = None
        self._version = None
        self._expire_date = None
        self._max_member_num = None
        self._max_application_num = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if avatar is not None:
            self.avatar = avatar
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if expire_date is not None:
            self.expire_date = expire_date
        if max_member_num is not None:
            self.max_member_num = max_member_num
        if max_application_num is not None:
            self.max_application_num = max_application_num

    @property
    def id(self):
        """Gets the id of this CompanyVO.  # noqa: E501

        id  # noqa: E501

        :return: The id of this CompanyVO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyVO.

        id  # noqa: E501

        :param id: The id of this CompanyVO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def avatar(self):
        """Gets the avatar of this CompanyVO.  # noqa: E501

        头像  # noqa: E501

        :return: The avatar of this CompanyVO.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this CompanyVO.

        头像  # noqa: E501

        :param avatar: The avatar of this CompanyVO.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def name(self):
        """Gets the name of this CompanyVO.  # noqa: E501

        公司名  # noqa: E501

        :return: The name of this CompanyVO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyVO.

        公司名  # noqa: E501

        :param name: The name of this CompanyVO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this CompanyVO.  # noqa: E501

        版本  # noqa: E501

        :return: The version of this CompanyVO.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CompanyVO.

        版本  # noqa: E501

        :param version: The version of this CompanyVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["free", "pro", "enterprise"]  # noqa: E501
        if version not in allowed_values:
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"  # noqa: E501
                .format(version, allowed_values)
            )

        self._version = version

    @property
    def expire_date(self):
        """Gets the expire_date of this CompanyVO.  # noqa: E501

        过期时间  # noqa: E501

        :return: The expire_date of this CompanyVO.  # noqa: E501
        :rtype: float
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this CompanyVO.

        过期时间  # noqa: E501

        :param expire_date: The expire_date of this CompanyVO.  # noqa: E501
        :type: float
        """

        self._expire_date = expire_date

    @property
    def max_member_num(self):
        """Gets the max_member_num of this CompanyVO.  # noqa: E501

        最大用户  # noqa: E501

        :return: The max_member_num of this CompanyVO.  # noqa: E501
        :rtype: int
        """
        return self._max_member_num

    @max_member_num.setter
    def max_member_num(self, max_member_num):
        """Sets the max_member_num of this CompanyVO.

        最大用户  # noqa: E501

        :param max_member_num: The max_member_num of this CompanyVO.  # noqa: E501
        :type: int
        """

        self._max_member_num = max_member_num

    @property
    def max_application_num(self):
        """Gets the max_application_num of this CompanyVO.  # noqa: E501

        最大应用数量  # noqa: E501

        :return: The max_application_num of this CompanyVO.  # noqa: E501
        :rtype: int
        """
        return self._max_application_num

    @max_application_num.setter
    def max_application_num(self, max_application_num):
        """Sets the max_application_num of this CompanyVO.

        最大应用数量  # noqa: E501

        :param max_application_num: The max_application_num of this CompanyVO.  # noqa: E501
        :type: int
        """

        self._max_application_num = max_application_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
