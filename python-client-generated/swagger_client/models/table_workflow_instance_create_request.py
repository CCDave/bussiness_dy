# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableWorkflowInstanceCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_id': 'str',
        'form_data': 'dict(str, object)',
        'owner_config': 'TableWorkflowInstanceOwnerConfig'
    }

    attribute_map = {
        'workflow_id': 'workflowId',
        'form_data': 'formData',
        'owner_config': 'ownerConfig'
    }

    def __init__(self, workflow_id=None, form_data=None, owner_config=None):  # noqa: E501
        """TableWorkflowInstanceCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._workflow_id = None
        self._form_data = None
        self._owner_config = None
        self.discriminator = None
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if form_data is not None:
            self.form_data = form_data
        if owner_config is not None:
            self.owner_config = owner_config

    @property
    def workflow_id(self):
        """Gets the workflow_id of this TableWorkflowInstanceCreateRequest.  # noqa: E501

        流程定义ID  # noqa: E501

        :return: The workflow_id of this TableWorkflowInstanceCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this TableWorkflowInstanceCreateRequest.

        流程定义ID  # noqa: E501

        :param workflow_id: The workflow_id of this TableWorkflowInstanceCreateRequest.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def form_data(self):
        """Gets the form_data of this TableWorkflowInstanceCreateRequest.  # noqa: E501

        表单数据  # noqa: E501

        :return: The form_data of this TableWorkflowInstanceCreateRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._form_data

    @form_data.setter
    def form_data(self, form_data):
        """Sets the form_data of this TableWorkflowInstanceCreateRequest.

        表单数据  # noqa: E501

        :param form_data: The form_data of this TableWorkflowInstanceCreateRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._form_data = form_data

    @property
    def owner_config(self):
        """Gets the owner_config of this TableWorkflowInstanceCreateRequest.  # noqa: E501


        :return: The owner_config of this TableWorkflowInstanceCreateRequest.  # noqa: E501
        :rtype: TableWorkflowInstanceOwnerConfig
        """
        return self._owner_config

    @owner_config.setter
    def owner_config(self, owner_config):
        """Sets the owner_config of this TableWorkflowInstanceCreateRequest.


        :param owner_config: The owner_config of this TableWorkflowInstanceCreateRequest.  # noqa: E501
        :type: TableWorkflowInstanceOwnerConfig
        """

        self._owner_config = owner_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableWorkflowInstanceCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableWorkflowInstanceCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
