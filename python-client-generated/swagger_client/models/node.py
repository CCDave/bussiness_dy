# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Node(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'color': 'str',
        'forward_rule': 'str',
        'allow_cancel': 'bool',
        'allow_transfer': 'bool',
        'allow_rollback': 'bool',
        'owner': 'list[object]',
        'cc': 'list[object]',
        'field_setting_list': 'list[FieldSetting]',
        'submit_text': 'str',
        'submit_button_text': 'str',
        'invoke_api': 'str',
        'invoke_automatic': 'str',
        'invoke_api_on_enter': 'str',
        'invoke_automatic_on_enter': 'str',
        'validate_list': 'list[WorkflowValidate]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'color': 'color',
        'forward_rule': 'forwardRule',
        'allow_cancel': 'allowCancel',
        'allow_transfer': 'allowTransfer',
        'allow_rollback': 'allowRollback',
        'owner': 'owner',
        'cc': 'cc',
        'field_setting_list': 'fieldSettingList',
        'submit_text': 'submitText',
        'submit_button_text': 'submitButtonText',
        'invoke_api': 'invokeApi',
        'invoke_automatic': 'invokeAutomatic',
        'invoke_api_on_enter': 'invokeApiOnEnter',
        'invoke_automatic_on_enter': 'invokeAutomaticOnEnter',
        'validate_list': 'validateList'
    }

    def __init__(self, id=None, name=None, color=None, forward_rule=None, allow_cancel=None, allow_transfer=None, allow_rollback=None, owner=None, cc=None, field_setting_list=None, submit_text=None, submit_button_text=None, invoke_api=None, invoke_automatic=None, invoke_api_on_enter=None, invoke_automatic_on_enter=None, validate_list=None):  # noqa: E501
        """Node - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._color = None
        self._forward_rule = None
        self._allow_cancel = None
        self._allow_transfer = None
        self._allow_rollback = None
        self._owner = None
        self._cc = None
        self._field_setting_list = None
        self._submit_text = None
        self._submit_button_text = None
        self._invoke_api = None
        self._invoke_automatic = None
        self._invoke_api_on_enter = None
        self._invoke_automatic_on_enter = None
        self._validate_list = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if color is not None:
            self.color = color
        if forward_rule is not None:
            self.forward_rule = forward_rule
        if allow_cancel is not None:
            self.allow_cancel = allow_cancel
        if allow_transfer is not None:
            self.allow_transfer = allow_transfer
        if allow_rollback is not None:
            self.allow_rollback = allow_rollback
        if owner is not None:
            self.owner = owner
        if cc is not None:
            self.cc = cc
        if field_setting_list is not None:
            self.field_setting_list = field_setting_list
        if submit_text is not None:
            self.submit_text = submit_text
        if submit_button_text is not None:
            self.submit_button_text = submit_button_text
        if invoke_api is not None:
            self.invoke_api = invoke_api
        if invoke_automatic is not None:
            self.invoke_automatic = invoke_automatic
        if invoke_api_on_enter is not None:
            self.invoke_api_on_enter = invoke_api_on_enter
        if invoke_automatic_on_enter is not None:
            self.invoke_automatic_on_enter = invoke_automatic_on_enter
        if validate_list is not None:
            self.validate_list = validate_list

    @property
    def id(self):
        """Gets the id of this Node.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this Node.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.

        ID  # noqa: E501

        :param id: The id of this Node.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Node.  # noqa: E501

        名称  # noqa: E501

        :return: The name of this Node.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.

        名称  # noqa: E501

        :param name: The name of this Node.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def color(self):
        """Gets the color of this Node.  # noqa: E501

        颜色  # noqa: E501

        :return: The color of this Node.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Node.

        颜色  # noqa: E501

        :param color: The color of this Node.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def forward_rule(self):
        """Gets the forward_rule of this Node.  # noqa: E501

        流转规则  # noqa: E501

        :return: The forward_rule of this Node.  # noqa: E501
        :rtype: str
        """
        return self._forward_rule

    @forward_rule.setter
    def forward_rule(self, forward_rule):
        """Sets the forward_rule of this Node.

        流转规则  # noqa: E501

        :param forward_rule: The forward_rule of this Node.  # noqa: E501
        :type: str
        """
        allowed_values = ["any", "all"]  # noqa: E501
        if forward_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `forward_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(forward_rule, allowed_values)
            )

        self._forward_rule = forward_rule

    @property
    def allow_cancel(self):
        """Gets the allow_cancel of this Node.  # noqa: E501

        是否允许发起撤销  # noqa: E501

        :return: The allow_cancel of this Node.  # noqa: E501
        :rtype: bool
        """
        return self._allow_cancel

    @allow_cancel.setter
    def allow_cancel(self, allow_cancel):
        """Sets the allow_cancel of this Node.

        是否允许发起撤销  # noqa: E501

        :param allow_cancel: The allow_cancel of this Node.  # noqa: E501
        :type: bool
        """

        self._allow_cancel = allow_cancel

    @property
    def allow_transfer(self):
        """Gets the allow_transfer of this Node.  # noqa: E501

        是否允许转交他人  # noqa: E501

        :return: The allow_transfer of this Node.  # noqa: E501
        :rtype: bool
        """
        return self._allow_transfer

    @allow_transfer.setter
    def allow_transfer(self, allow_transfer):
        """Sets the allow_transfer of this Node.

        是否允许转交他人  # noqa: E501

        :param allow_transfer: The allow_transfer of this Node.  # noqa: E501
        :type: bool
        """

        self._allow_transfer = allow_transfer

    @property
    def allow_rollback(self):
        """Gets the allow_rollback of this Node.  # noqa: E501

        是否允许回退  # noqa: E501

        :return: The allow_rollback of this Node.  # noqa: E501
        :rtype: bool
        """
        return self._allow_rollback

    @allow_rollback.setter
    def allow_rollback(self, allow_rollback):
        """Sets the allow_rollback of this Node.

        是否允许回退  # noqa: E501

        :param allow_rollback: The allow_rollback of this Node.  # noqa: E501
        :type: bool
        """

        self._allow_rollback = allow_rollback

    @property
    def owner(self):
        """Gets the owner of this Node.  # noqa: E501

        审批人列表  # noqa: E501

        :return: The owner of this Node.  # noqa: E501
        :rtype: list[object]
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Node.

        审批人列表  # noqa: E501

        :param owner: The owner of this Node.  # noqa: E501
        :type: list[object]
        """

        self._owner = owner

    @property
    def cc(self):
        """Gets the cc of this Node.  # noqa: E501

        抄送人列表  # noqa: E501

        :return: The cc of this Node.  # noqa: E501
        :rtype: list[object]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this Node.

        抄送人列表  # noqa: E501

        :param cc: The cc of this Node.  # noqa: E501
        :type: list[object]
        """

        self._cc = cc

    @property
    def field_setting_list(self):
        """Gets the field_setting_list of this Node.  # noqa: E501

        字段配置  # noqa: E501

        :return: The field_setting_list of this Node.  # noqa: E501
        :rtype: list[FieldSetting]
        """
        return self._field_setting_list

    @field_setting_list.setter
    def field_setting_list(self, field_setting_list):
        """Sets the field_setting_list of this Node.

        字段配置  # noqa: E501

        :param field_setting_list: The field_setting_list of this Node.  # noqa: E501
        :type: list[FieldSetting]
        """

        self._field_setting_list = field_setting_list

    @property
    def submit_text(self):
        """Gets the submit_text of this Node.  # noqa: E501

        默认审批意见  # noqa: E501

        :return: The submit_text of this Node.  # noqa: E501
        :rtype: str
        """
        return self._submit_text

    @submit_text.setter
    def submit_text(self, submit_text):
        """Sets the submit_text of this Node.

        默认审批意见  # noqa: E501

        :param submit_text: The submit_text of this Node.  # noqa: E501
        :type: str
        """

        self._submit_text = submit_text

    @property
    def submit_button_text(self):
        """Gets the submit_button_text of this Node.  # noqa: E501

        同意按钮的文字  # noqa: E501

        :return: The submit_button_text of this Node.  # noqa: E501
        :rtype: str
        """
        return self._submit_button_text

    @submit_button_text.setter
    def submit_button_text(self, submit_button_text):
        """Sets the submit_button_text of this Node.

        同意按钮的文字  # noqa: E501

        :param submit_button_text: The submit_button_text of this Node.  # noqa: E501
        :type: str
        """

        self._submit_button_text = submit_button_text

    @property
    def invoke_api(self):
        """Gets the invoke_api of this Node.  # noqa: E501

        流转后执行的API  # noqa: E501

        :return: The invoke_api of this Node.  # noqa: E501
        :rtype: str
        """
        return self._invoke_api

    @invoke_api.setter
    def invoke_api(self, invoke_api):
        """Sets the invoke_api of this Node.

        流转后执行的API  # noqa: E501

        :param invoke_api: The invoke_api of this Node.  # noqa: E501
        :type: str
        """

        self._invoke_api = invoke_api

    @property
    def invoke_automatic(self):
        """Gets the invoke_automatic of this Node.  # noqa: E501

        流转后执行的自动化  # noqa: E501

        :return: The invoke_automatic of this Node.  # noqa: E501
        :rtype: str
        """
        return self._invoke_automatic

    @invoke_automatic.setter
    def invoke_automatic(self, invoke_automatic):
        """Sets the invoke_automatic of this Node.

        流转后执行的自动化  # noqa: E501

        :param invoke_automatic: The invoke_automatic of this Node.  # noqa: E501
        :type: str
        """

        self._invoke_automatic = invoke_automatic

    @property
    def invoke_api_on_enter(self):
        """Gets the invoke_api_on_enter of this Node.  # noqa: E501

        进入节点时执行的API  # noqa: E501

        :return: The invoke_api_on_enter of this Node.  # noqa: E501
        :rtype: str
        """
        return self._invoke_api_on_enter

    @invoke_api_on_enter.setter
    def invoke_api_on_enter(self, invoke_api_on_enter):
        """Sets the invoke_api_on_enter of this Node.

        进入节点时执行的API  # noqa: E501

        :param invoke_api_on_enter: The invoke_api_on_enter of this Node.  # noqa: E501
        :type: str
        """

        self._invoke_api_on_enter = invoke_api_on_enter

    @property
    def invoke_automatic_on_enter(self):
        """Gets the invoke_automatic_on_enter of this Node.  # noqa: E501

        进入节点时执行的自动化  # noqa: E501

        :return: The invoke_automatic_on_enter of this Node.  # noqa: E501
        :rtype: str
        """
        return self._invoke_automatic_on_enter

    @invoke_automatic_on_enter.setter
    def invoke_automatic_on_enter(self, invoke_automatic_on_enter):
        """Sets the invoke_automatic_on_enter of this Node.

        进入节点时执行的自动化  # noqa: E501

        :param invoke_automatic_on_enter: The invoke_automatic_on_enter of this Node.  # noqa: E501
        :type: str
        """

        self._invoke_automatic_on_enter = invoke_automatic_on_enter

    @property
    def validate_list(self):
        """Gets the validate_list of this Node.  # noqa: E501

        校验规则列表  # noqa: E501

        :return: The validate_list of this Node.  # noqa: E501
        :rtype: list[WorkflowValidate]
        """
        return self._validate_list

    @validate_list.setter
    def validate_list(self, validate_list):
        """Sets the validate_list of this Node.

        校验规则列表  # noqa: E501

        :param validate_list: The validate_list of this Node.  # noqa: E501
        :type: list[WorkflowValidate]
        """

        self._validate_list = validate_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Node, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
