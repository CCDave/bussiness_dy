# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableWorkflowInstanceNodeOwnerVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'table_id': 'str',
        'workflow_id': 'str',
        'instance_id': 'str',
        'node_id': 'str',
        'node_name': 'str',
        'instance_node_id': 'str',
        'account_id': 'str',
        'account_name': 'str',
        'account_avatar': 'str',
        'status': 'str',
        'type': 'str',
        'is_read': 'bool',
        'node_type': 'str',
        'result': 'str',
        'comment': 'str',
        'module_name': 'str',
        'module_icon': 'str',
        'instance_title': 'str',
        'is_finished': 'bool',
        'finish_type': 'str',
        'finish_text': 'str',
        'finish_time': 'float',
        'record_id': 'str',
        'before_node_id': 'str',
        'before_node_name': 'str',
        'before_node_color': 'str',
        'curr_node_id': 'str',
        'curr_node_name': 'str',
        'curr_node_color': 'str',
        'owner_account_list': 'list[TableAccountSimple]',
        'cc_account_list': 'list[TableAccountSimple]',
        'id': 'str',
        'company_id': 'str',
        'application_id': 'str',
        'create_time': 'float',
        'update_time': 'float',
        'create_account_id': 'str',
        'create_account_name': 'str',
        'update_account_id': 'str',
        'update_account_name': 'str',
        'app_name': 'str',
        'app_color': 'str',
        'app_icon': 'str',
        'is_delete': 'bool'
    }

    attribute_map = {
        'table_id': 'tableId',
        'workflow_id': 'workflowId',
        'instance_id': 'instanceId',
        'node_id': 'nodeId',
        'node_name': 'nodeName',
        'instance_node_id': 'instanceNodeId',
        'account_id': 'accountId',
        'account_name': 'accountName',
        'account_avatar': 'accountAvatar',
        'status': 'status',
        'type': 'type',
        'is_read': 'isRead',
        'node_type': 'nodeType',
        'result': 'result',
        'comment': 'comment',
        'module_name': 'moduleName',
        'module_icon': 'moduleIcon',
        'instance_title': 'instanceTitle',
        'is_finished': 'isFinished',
        'finish_type': 'finishType',
        'finish_text': 'finishText',
        'finish_time': 'finishTime',
        'record_id': 'recordId',
        'before_node_id': 'beforeNodeId',
        'before_node_name': 'beforeNodeName',
        'before_node_color': 'beforeNodeColor',
        'curr_node_id': 'currNodeId',
        'curr_node_name': 'currNodeName',
        'curr_node_color': 'currNodeColor',
        'owner_account_list': 'ownerAccountList',
        'cc_account_list': 'ccAccountList',
        'id': 'id',
        'company_id': 'companyId',
        'application_id': 'applicationId',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'create_account_id': 'createAccountId',
        'create_account_name': 'createAccountName',
        'update_account_id': 'updateAccountId',
        'update_account_name': 'updateAccountName',
        'app_name': 'appName',
        'app_color': 'appColor',
        'app_icon': 'appIcon',
        'is_delete': 'isDelete'
    }

    def __init__(self, table_id=None, workflow_id=None, instance_id=None, node_id=None, node_name=None, instance_node_id=None, account_id=None, account_name=None, account_avatar=None, status=None, type=None, is_read=None, node_type=None, result=None, comment=None, module_name=None, module_icon=None, instance_title=None, is_finished=None, finish_type=None, finish_text=None, finish_time=None, record_id=None, before_node_id=None, before_node_name=None, before_node_color=None, curr_node_id=None, curr_node_name=None, curr_node_color=None, owner_account_list=None, cc_account_list=None, id=None, company_id=None, application_id=None, create_time=None, update_time=None, create_account_id=None, create_account_name=None, update_account_id=None, update_account_name=None, app_name=None, app_color=None, app_icon=None, is_delete=None):  # noqa: E501
        """TableWorkflowInstanceNodeOwnerVO - a model defined in Swagger"""  # noqa: E501
        self._table_id = None
        self._workflow_id = None
        self._instance_id = None
        self._node_id = None
        self._node_name = None
        self._instance_node_id = None
        self._account_id = None
        self._account_name = None
        self._account_avatar = None
        self._status = None
        self._type = None
        self._is_read = None
        self._node_type = None
        self._result = None
        self._comment = None
        self._module_name = None
        self._module_icon = None
        self._instance_title = None
        self._is_finished = None
        self._finish_type = None
        self._finish_text = None
        self._finish_time = None
        self._record_id = None
        self._before_node_id = None
        self._before_node_name = None
        self._before_node_color = None
        self._curr_node_id = None
        self._curr_node_name = None
        self._curr_node_color = None
        self._owner_account_list = None
        self._cc_account_list = None
        self._id = None
        self._company_id = None
        self._application_id = None
        self._create_time = None
        self._update_time = None
        self._create_account_id = None
        self._create_account_name = None
        self._update_account_id = None
        self._update_account_name = None
        self._app_name = None
        self._app_color = None
        self._app_icon = None
        self._is_delete = None
        self.discriminator = None
        if table_id is not None:
            self.table_id = table_id
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if instance_id is not None:
            self.instance_id = instance_id
        if node_id is not None:
            self.node_id = node_id
        if node_name is not None:
            self.node_name = node_name
        if instance_node_id is not None:
            self.instance_node_id = instance_node_id
        if account_id is not None:
            self.account_id = account_id
        if account_name is not None:
            self.account_name = account_name
        if account_avatar is not None:
            self.account_avatar = account_avatar
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if is_read is not None:
            self.is_read = is_read
        if node_type is not None:
            self.node_type = node_type
        if result is not None:
            self.result = result
        if comment is not None:
            self.comment = comment
        if module_name is not None:
            self.module_name = module_name
        if module_icon is not None:
            self.module_icon = module_icon
        if instance_title is not None:
            self.instance_title = instance_title
        if is_finished is not None:
            self.is_finished = is_finished
        if finish_type is not None:
            self.finish_type = finish_type
        if finish_text is not None:
            self.finish_text = finish_text
        if finish_time is not None:
            self.finish_time = finish_time
        if record_id is not None:
            self.record_id = record_id
        if before_node_id is not None:
            self.before_node_id = before_node_id
        if before_node_name is not None:
            self.before_node_name = before_node_name
        if before_node_color is not None:
            self.before_node_color = before_node_color
        if curr_node_id is not None:
            self.curr_node_id = curr_node_id
        if curr_node_name is not None:
            self.curr_node_name = curr_node_name
        if curr_node_color is not None:
            self.curr_node_color = curr_node_color
        if owner_account_list is not None:
            self.owner_account_list = owner_account_list
        if cc_account_list is not None:
            self.cc_account_list = cc_account_list
        if id is not None:
            self.id = id
        if company_id is not None:
            self.company_id = company_id
        if application_id is not None:
            self.application_id = application_id
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if create_account_id is not None:
            self.create_account_id = create_account_id
        if create_account_name is not None:
            self.create_account_name = create_account_name
        if update_account_id is not None:
            self.update_account_id = update_account_id
        if update_account_name is not None:
            self.update_account_name = update_account_name
        if app_name is not None:
            self.app_name = app_name
        if app_color is not None:
            self.app_color = app_color
        if app_icon is not None:
            self.app_icon = app_icon
        if is_delete is not None:
            self.is_delete = is_delete

    @property
    def table_id(self):
        """Gets the table_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        数据表  # noqa: E501

        :return: The table_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this TableWorkflowInstanceNodeOwnerVO.

        数据表  # noqa: E501

        :param table_id: The table_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._table_id = table_id

    @property
    def workflow_id(self):
        """Gets the workflow_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程定义  # noqa: E501

        :return: The workflow_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this TableWorkflowInstanceNodeOwnerVO.

        流程定义  # noqa: E501

        :param workflow_id: The workflow_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def instance_id(self):
        """Gets the instance_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程实例  # noqa: E501

        :return: The instance_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this TableWorkflowInstanceNodeOwnerVO.

        流程实例  # noqa: E501

        :param instance_id: The instance_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def node_id(self):
        """Gets the node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程图节点ID  # noqa: E501

        :return: The node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TableWorkflowInstanceNodeOwnerVO.

        流程图节点ID  # noqa: E501

        :param node_id: The node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def node_name(self):
        """Gets the node_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程图节点名称  # noqa: E501

        :return: The node_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this TableWorkflowInstanceNodeOwnerVO.

        流程图节点名称  # noqa: E501

        :param node_name: The node_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def instance_node_id(self):
        """Gets the instance_node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程实例节点ID  # noqa: E501

        :return: The instance_node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._instance_node_id

    @instance_node_id.setter
    def instance_node_id(self, instance_node_id):
        """Sets the instance_node_id of this TableWorkflowInstanceNodeOwnerVO.

        流程实例节点ID  # noqa: E501

        :param instance_node_id: The instance_node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._instance_node_id = instance_node_id

    @property
    def account_id(self):
        """Gets the account_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        审批人  # noqa: E501

        :return: The account_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TableWorkflowInstanceNodeOwnerVO.

        审批人  # noqa: E501

        :param account_id: The account_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        审批人名称  # noqa: E501

        :return: The account_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this TableWorkflowInstanceNodeOwnerVO.

        审批人名称  # noqa: E501

        :param account_name: The account_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_avatar(self):
        """Gets the account_avatar of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        审批人头像  # noqa: E501

        :return: The account_avatar of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._account_avatar

    @account_avatar.setter
    def account_avatar(self, account_avatar):
        """Sets the account_avatar of this TableWorkflowInstanceNodeOwnerVO.

        审批人头像  # noqa: E501

        :param account_avatar: The account_avatar of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._account_avatar = account_avatar

    @property
    def status(self):
        """Gets the status of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        状态  # noqa: E501

        :return: The status of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TableWorkflowInstanceNodeOwnerVO.

        状态  # noqa: E501

        :param status: The status of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "Cc", "Done", "Forward"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        类型  # noqa: E501

        :return: The type of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TableWorkflowInstanceNodeOwnerVO.

        类型  # noqa: E501

        :param type: The type of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Owner", "Cc"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_read(self):
        """Gets the is_read of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        是否已读  # noqa: E501

        :return: The is_read of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this TableWorkflowInstanceNodeOwnerVO.

        是否已读  # noqa: E501

        :param is_read: The is_read of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: bool
        """

        self._is_read = is_read

    @property
    def node_type(self):
        """Gets the node_type of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程图节点类型  # noqa: E501

        :return: The node_type of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this TableWorkflowInstanceNodeOwnerVO.

        流程图节点类型  # noqa: E501

        :param node_type: The node_type of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Start", "End", "Event", "Fork", "Join"]  # noqa: E501
        if node_type not in allowed_values:
            raise ValueError(
                "Invalid value for `node_type` ({0}), must be one of {1}"  # noqa: E501
                .format(node_type, allowed_values)
            )

        self._node_type = node_type

    @property
    def result(self):
        """Gets the result of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        审批结果  # noqa: E501

        :return: The result of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TableWorkflowInstanceNodeOwnerVO.

        审批结果  # noqa: E501

        :param result: The result of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Agree", "Refuse", "Rollback"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def comment(self):
        """Gets the comment of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        审批意见  # noqa: E501

        :return: The comment of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TableWorkflowInstanceNodeOwnerVO.

        审批意见  # noqa: E501

        :param comment: The comment of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def module_name(self):
        """Gets the module_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        模块名称  # noqa: E501

        :return: The module_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this TableWorkflowInstanceNodeOwnerVO.

        模块名称  # noqa: E501

        :param module_name: The module_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._module_name = module_name

    @property
    def module_icon(self):
        """Gets the module_icon of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        模块图标  # noqa: E501

        :return: The module_icon of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._module_icon

    @module_icon.setter
    def module_icon(self, module_icon):
        """Sets the module_icon of this TableWorkflowInstanceNodeOwnerVO.

        模块图标  # noqa: E501

        :param module_icon: The module_icon of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._module_icon = module_icon

    @property
    def instance_title(self):
        """Gets the instance_title of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程实例标题  # noqa: E501

        :return: The instance_title of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._instance_title

    @instance_title.setter
    def instance_title(self, instance_title):
        """Sets the instance_title of this TableWorkflowInstanceNodeOwnerVO.

        流程实例标题  # noqa: E501

        :param instance_title: The instance_title of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._instance_title = instance_title

    @property
    def is_finished(self):
        """Gets the is_finished of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程实例是否结束  # noqa: E501

        :return: The is_finished of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_finished

    @is_finished.setter
    def is_finished(self, is_finished):
        """Sets the is_finished of this TableWorkflowInstanceNodeOwnerVO.

        流程实例是否结束  # noqa: E501

        :param is_finished: The is_finished of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: bool
        """

        self._is_finished = is_finished

    @property
    def finish_type(self):
        """Gets the finish_type of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程实例结束类型  # noqa: E501

        :return: The finish_type of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._finish_type

    @finish_type.setter
    def finish_type(self, finish_type):
        """Sets the finish_type of this TableWorkflowInstanceNodeOwnerVO.

        流程实例结束类型  # noqa: E501

        :param finish_type: The finish_type of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Finish", "Terminate", "Cancel"]  # noqa: E501
        if finish_type not in allowed_values:
            raise ValueError(
                "Invalid value for `finish_type` ({0}), must be one of {1}"  # noqa: E501
                .format(finish_type, allowed_values)
            )

        self._finish_type = finish_type

    @property
    def finish_text(self):
        """Gets the finish_text of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程实例结束文本  # noqa: E501

        :return: The finish_text of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._finish_text

    @finish_text.setter
    def finish_text(self, finish_text):
        """Sets the finish_text of this TableWorkflowInstanceNodeOwnerVO.

        流程实例结束文本  # noqa: E501

        :param finish_text: The finish_text of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._finish_text = finish_text

    @property
    def finish_time(self):
        """Gets the finish_time of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        流程实例结束时间  # noqa: E501

        :return: The finish_time of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: float
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this TableWorkflowInstanceNodeOwnerVO.

        流程实例结束时间  # noqa: E501

        :param finish_time: The finish_time of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: float
        """

        self._finish_time = finish_time

    @property
    def record_id(self):
        """Gets the record_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        记录ID  # noqa: E501

        :return: The record_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this TableWorkflowInstanceNodeOwnerVO.

        记录ID  # noqa: E501

        :param record_id: The record_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._record_id = record_id

    @property
    def before_node_id(self):
        """Gets the before_node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        上一个流程图节点ID  # noqa: E501

        :return: The before_node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._before_node_id

    @before_node_id.setter
    def before_node_id(self, before_node_id):
        """Sets the before_node_id of this TableWorkflowInstanceNodeOwnerVO.

        上一个流程图节点ID  # noqa: E501

        :param before_node_id: The before_node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._before_node_id = before_node_id

    @property
    def before_node_name(self):
        """Gets the before_node_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        上一个流程图节点名称  # noqa: E501

        :return: The before_node_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._before_node_name

    @before_node_name.setter
    def before_node_name(self, before_node_name):
        """Sets the before_node_name of this TableWorkflowInstanceNodeOwnerVO.

        上一个流程图节点名称  # noqa: E501

        :param before_node_name: The before_node_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._before_node_name = before_node_name

    @property
    def before_node_color(self):
        """Gets the before_node_color of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        上一个流程图节点颜色  # noqa: E501

        :return: The before_node_color of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._before_node_color

    @before_node_color.setter
    def before_node_color(self, before_node_color):
        """Sets the before_node_color of this TableWorkflowInstanceNodeOwnerVO.

        上一个流程图节点颜色  # noqa: E501

        :param before_node_color: The before_node_color of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._before_node_color = before_node_color

    @property
    def curr_node_id(self):
        """Gets the curr_node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        当前流程图节点ID  # noqa: E501

        :return: The curr_node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._curr_node_id

    @curr_node_id.setter
    def curr_node_id(self, curr_node_id):
        """Sets the curr_node_id of this TableWorkflowInstanceNodeOwnerVO.

        当前流程图节点ID  # noqa: E501

        :param curr_node_id: The curr_node_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._curr_node_id = curr_node_id

    @property
    def curr_node_name(self):
        """Gets the curr_node_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        当前流程图节点名称  # noqa: E501

        :return: The curr_node_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._curr_node_name

    @curr_node_name.setter
    def curr_node_name(self, curr_node_name):
        """Sets the curr_node_name of this TableWorkflowInstanceNodeOwnerVO.

        当前流程图节点名称  # noqa: E501

        :param curr_node_name: The curr_node_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._curr_node_name = curr_node_name

    @property
    def curr_node_color(self):
        """Gets the curr_node_color of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        当前流程图节点颜色  # noqa: E501

        :return: The curr_node_color of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._curr_node_color

    @curr_node_color.setter
    def curr_node_color(self, curr_node_color):
        """Sets the curr_node_color of this TableWorkflowInstanceNodeOwnerVO.

        当前流程图节点颜色  # noqa: E501

        :param curr_node_color: The curr_node_color of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._curr_node_color = curr_node_color

    @property
    def owner_account_list(self):
        """Gets the owner_account_list of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        审批人列表  # noqa: E501

        :return: The owner_account_list of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: list[TableAccountSimple]
        """
        return self._owner_account_list

    @owner_account_list.setter
    def owner_account_list(self, owner_account_list):
        """Sets the owner_account_list of this TableWorkflowInstanceNodeOwnerVO.

        审批人列表  # noqa: E501

        :param owner_account_list: The owner_account_list of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: list[TableAccountSimple]
        """

        self._owner_account_list = owner_account_list

    @property
    def cc_account_list(self):
        """Gets the cc_account_list of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        抄送人列表  # noqa: E501

        :return: The cc_account_list of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: list[TableAccountSimple]
        """
        return self._cc_account_list

    @cc_account_list.setter
    def cc_account_list(self, cc_account_list):
        """Sets the cc_account_list of this TableWorkflowInstanceNodeOwnerVO.

        抄送人列表  # noqa: E501

        :param cc_account_list: The cc_account_list of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: list[TableAccountSimple]
        """

        self._cc_account_list = cc_account_list

    @property
    def id(self):
        """Gets the id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TableWorkflowInstanceNodeOwnerVO.

        ID  # noqa: E501

        :param id: The id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        团队ID  # noqa: E501

        :return: The company_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this TableWorkflowInstanceNodeOwnerVO.

        团队ID  # noqa: E501

        :param company_id: The company_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def application_id(self):
        """Gets the application_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        应用ID  # noqa: E501

        :return: The application_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this TableWorkflowInstanceNodeOwnerVO.

        应用ID  # noqa: E501

        :param application_id: The application_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def create_time(self):
        """Gets the create_time of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        创建时间  # noqa: E501

        :return: The create_time of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: float
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TableWorkflowInstanceNodeOwnerVO.

        创建时间  # noqa: E501

        :param create_time: The create_time of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: float
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        最后更新时间  # noqa: E501

        :return: The update_time of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: float
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TableWorkflowInstanceNodeOwnerVO.

        最后更新时间  # noqa: E501

        :param update_time: The update_time of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: float
        """

        self._update_time = update_time

    @property
    def create_account_id(self):
        """Gets the create_account_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        创建人ID  # noqa: E501

        :return: The create_account_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._create_account_id

    @create_account_id.setter
    def create_account_id(self, create_account_id):
        """Sets the create_account_id of this TableWorkflowInstanceNodeOwnerVO.

        创建人ID  # noqa: E501

        :param create_account_id: The create_account_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._create_account_id = create_account_id

    @property
    def create_account_name(self):
        """Gets the create_account_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        创建人名称  # noqa: E501

        :return: The create_account_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._create_account_name

    @create_account_name.setter
    def create_account_name(self, create_account_name):
        """Sets the create_account_name of this TableWorkflowInstanceNodeOwnerVO.

        创建人名称  # noqa: E501

        :param create_account_name: The create_account_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._create_account_name = create_account_name

    @property
    def update_account_id(self):
        """Gets the update_account_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        最后更新人ID  # noqa: E501

        :return: The update_account_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._update_account_id

    @update_account_id.setter
    def update_account_id(self, update_account_id):
        """Sets the update_account_id of this TableWorkflowInstanceNodeOwnerVO.

        最后更新人ID  # noqa: E501

        :param update_account_id: The update_account_id of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._update_account_id = update_account_id

    @property
    def update_account_name(self):
        """Gets the update_account_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        最后更新人名称  # noqa: E501

        :return: The update_account_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._update_account_name

    @update_account_name.setter
    def update_account_name(self, update_account_name):
        """Sets the update_account_name of this TableWorkflowInstanceNodeOwnerVO.

        最后更新人名称  # noqa: E501

        :param update_account_name: The update_account_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._update_account_name = update_account_name

    @property
    def app_name(self):
        """Gets the app_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        应用名称  # noqa: E501

        :return: The app_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this TableWorkflowInstanceNodeOwnerVO.

        应用名称  # noqa: E501

        :param app_name: The app_name of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_color(self):
        """Gets the app_color of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        应用颜色  # noqa: E501

        :return: The app_color of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._app_color

    @app_color.setter
    def app_color(self, app_color):
        """Sets the app_color of this TableWorkflowInstanceNodeOwnerVO.

        应用颜色  # noqa: E501

        :param app_color: The app_color of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._app_color = app_color

    @property
    def app_icon(self):
        """Gets the app_icon of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        应用图标  # noqa: E501

        :return: The app_icon of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: str
        """
        return self._app_icon

    @app_icon.setter
    def app_icon(self, app_icon):
        """Sets the app_icon of this TableWorkflowInstanceNodeOwnerVO.

        应用图标  # noqa: E501

        :param app_icon: The app_icon of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: str
        """

        self._app_icon = app_icon

    @property
    def is_delete(self):
        """Gets the is_delete of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501

        是否已删除  # noqa: E501

        :return: The is_delete of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_delete

    @is_delete.setter
    def is_delete(self, is_delete):
        """Sets the is_delete of this TableWorkflowInstanceNodeOwnerVO.

        是否已删除  # noqa: E501

        :param is_delete: The is_delete of this TableWorkflowInstanceNodeOwnerVO.  # noqa: E501
        :type: bool
        """

        self._is_delete = is_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableWorkflowInstanceNodeOwnerVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableWorkflowInstanceNodeOwnerVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
