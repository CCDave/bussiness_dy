# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'src_id': 'str',
        'company_id': 'str',
        'name': 'str',
        'icon': 'str',
        'color': 'str',
        'group_id': 'str',
        'description': 'str',
        'is_archive': 'bool',
        'enable_plugin': 'bool',
        'create_time': 'float',
        'update_time': 'float',
        'create_account_id': 'str',
        'create_account_name': 'str',
        'update_account_id': 'str',
        'update_account_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'src_id': 'srcId',
        'company_id': 'companyId',
        'name': 'name',
        'icon': 'icon',
        'color': 'color',
        'group_id': 'groupId',
        'description': 'description',
        'is_archive': 'isArchive',
        'enable_plugin': 'enablePlugin',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'create_account_id': 'createAccountId',
        'create_account_name': 'createAccountName',
        'update_account_id': 'updateAccountId',
        'update_account_name': 'updateAccountName'
    }

    def __init__(self, id=None, src_id=None, company_id=None, name=None, icon=None, color=None, group_id=None, description=None, is_archive=None, enable_plugin=None, create_time=None, update_time=None, create_account_id=None, create_account_name=None, update_account_id=None, update_account_name=None):  # noqa: E501
        """ApplicationVO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._src_id = None
        self._company_id = None
        self._name = None
        self._icon = None
        self._color = None
        self._group_id = None
        self._description = None
        self._is_archive = None
        self._enable_plugin = None
        self._create_time = None
        self._update_time = None
        self._create_account_id = None
        self._create_account_name = None
        self._update_account_id = None
        self._update_account_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if src_id is not None:
            self.src_id = src_id
        if company_id is not None:
            self.company_id = company_id
        if name is not None:
            self.name = name
        if icon is not None:
            self.icon = icon
        if color is not None:
            self.color = color
        if group_id is not None:
            self.group_id = group_id
        if description is not None:
            self.description = description
        if is_archive is not None:
            self.is_archive = is_archive
        if enable_plugin is not None:
            self.enable_plugin = enable_plugin
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if create_account_id is not None:
            self.create_account_id = create_account_id
        if create_account_name is not None:
            self.create_account_name = create_account_name
        if update_account_id is not None:
            self.update_account_id = update_account_id
        if update_account_name is not None:
            self.update_account_name = update_account_name

    @property
    def id(self):
        """Gets the id of this ApplicationVO.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationVO.

        ID  # noqa: E501

        :param id: The id of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def src_id(self):
        """Gets the src_id of this ApplicationVO.  # noqa: E501

        源应用ID  # noqa: E501

        :return: The src_id of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._src_id

    @src_id.setter
    def src_id(self, src_id):
        """Sets the src_id of this ApplicationVO.

        源应用ID  # noqa: E501

        :param src_id: The src_id of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._src_id = src_id

    @property
    def company_id(self):
        """Gets the company_id of this ApplicationVO.  # noqa: E501

        团队ID  # noqa: E501

        :return: The company_id of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ApplicationVO.

        团队ID  # noqa: E501

        :param company_id: The company_id of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def name(self):
        """Gets the name of this ApplicationVO.  # noqa: E501

        名称  # noqa: E501

        :return: The name of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationVO.

        名称  # noqa: E501

        :param name: The name of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def icon(self):
        """Gets the icon of this ApplicationVO.  # noqa: E501

        图标  # noqa: E501

        :return: The icon of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ApplicationVO.

        图标  # noqa: E501

        :param icon: The icon of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def color(self):
        """Gets the color of this ApplicationVO.  # noqa: E501

        颜色  # noqa: E501

        :return: The color of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ApplicationVO.

        颜色  # noqa: E501

        :param color: The color of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def group_id(self):
        """Gets the group_id of this ApplicationVO.  # noqa: E501

        分组  # noqa: E501

        :return: The group_id of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ApplicationVO.

        分组  # noqa: E501

        :param group_id: The group_id of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def description(self):
        """Gets the description of this ApplicationVO.  # noqa: E501

        描述  # noqa: E501

        :return: The description of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationVO.

        描述  # noqa: E501

        :param description: The description of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_archive(self):
        """Gets the is_archive of this ApplicationVO.  # noqa: E501

        是否归档  # noqa: E501

        :return: The is_archive of this ApplicationVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_archive

    @is_archive.setter
    def is_archive(self, is_archive):
        """Sets the is_archive of this ApplicationVO.

        是否归档  # noqa: E501

        :param is_archive: The is_archive of this ApplicationVO.  # noqa: E501
        :type: bool
        """

        self._is_archive = is_archive

    @property
    def enable_plugin(self):
        """Gets the enable_plugin of this ApplicationVO.  # noqa: E501

        是否启用脚本  # noqa: E501

        :return: The enable_plugin of this ApplicationVO.  # noqa: E501
        :rtype: bool
        """
        return self._enable_plugin

    @enable_plugin.setter
    def enable_plugin(self, enable_plugin):
        """Sets the enable_plugin of this ApplicationVO.

        是否启用脚本  # noqa: E501

        :param enable_plugin: The enable_plugin of this ApplicationVO.  # noqa: E501
        :type: bool
        """

        self._enable_plugin = enable_plugin

    @property
    def create_time(self):
        """Gets the create_time of this ApplicationVO.  # noqa: E501

        创建时间  # noqa: E501

        :return: The create_time of this ApplicationVO.  # noqa: E501
        :rtype: float
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApplicationVO.

        创建时间  # noqa: E501

        :param create_time: The create_time of this ApplicationVO.  # noqa: E501
        :type: float
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this ApplicationVO.  # noqa: E501

        最后更新时间  # noqa: E501

        :return: The update_time of this ApplicationVO.  # noqa: E501
        :rtype: float
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ApplicationVO.

        最后更新时间  # noqa: E501

        :param update_time: The update_time of this ApplicationVO.  # noqa: E501
        :type: float
        """

        self._update_time = update_time

    @property
    def create_account_id(self):
        """Gets the create_account_id of this ApplicationVO.  # noqa: E501

        创建人ID  # noqa: E501

        :return: The create_account_id of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._create_account_id

    @create_account_id.setter
    def create_account_id(self, create_account_id):
        """Sets the create_account_id of this ApplicationVO.

        创建人ID  # noqa: E501

        :param create_account_id: The create_account_id of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._create_account_id = create_account_id

    @property
    def create_account_name(self):
        """Gets the create_account_name of this ApplicationVO.  # noqa: E501

        创建人名称  # noqa: E501

        :return: The create_account_name of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._create_account_name

    @create_account_name.setter
    def create_account_name(self, create_account_name):
        """Sets the create_account_name of this ApplicationVO.

        创建人名称  # noqa: E501

        :param create_account_name: The create_account_name of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._create_account_name = create_account_name

    @property
    def update_account_id(self):
        """Gets the update_account_id of this ApplicationVO.  # noqa: E501

        最后更新人ID  # noqa: E501

        :return: The update_account_id of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._update_account_id

    @update_account_id.setter
    def update_account_id(self, update_account_id):
        """Sets the update_account_id of this ApplicationVO.

        最后更新人ID  # noqa: E501

        :param update_account_id: The update_account_id of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._update_account_id = update_account_id

    @property
    def update_account_name(self):
        """Gets the update_account_name of this ApplicationVO.  # noqa: E501

        最后更新人名称  # noqa: E501

        :return: The update_account_name of this ApplicationVO.  # noqa: E501
        :rtype: str
        """
        return self._update_account_name

    @update_account_name.setter
    def update_account_name(self, update_account_name):
        """Sets the update_account_name of this ApplicationVO.

        最后更新人名称  # noqa: E501

        :param update_account_name: The update_account_name of this ApplicationVO.  # noqa: E501
        :type: str
        """

        self._update_account_name = update_account_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
