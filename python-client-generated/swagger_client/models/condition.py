# coding: utf-8

"""
    织信开放API接口

    织信开放API接口  # noqa: E501

    OpenAPI spec version: v2
    Contact: sales@conrerstone365.cn
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Condition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_id': 'str',
        'opt': 'str',
        'value': 'object',
        'func': 'str',
        'var': 'bool'
    }

    attribute_map = {
        'field_id': 'fieldId',
        'opt': 'opt',
        'value': 'value',
        'func': 'func',
        'var': 'var'
    }

    def __init__(self, field_id=None, opt=None, value=None, func=None, var=None):  # noqa: E501
        """Condition - a model defined in Swagger"""  # noqa: E501
        self._field_id = None
        self._opt = None
        self._value = None
        self._func = None
        self._var = None
        self.discriminator = None
        if field_id is not None:
            self.field_id = field_id
        if opt is not None:
            self.opt = opt
        if value is not None:
            self.value = value
        if func is not None:
            self.func = func
        if var is not None:
            self.var = var

    @property
    def field_id(self):
        """Gets the field_id of this Condition.  # noqa: E501

        字段id  # noqa: E501

        :return: The field_id of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this Condition.

        字段id  # noqa: E501

        :param field_id: The field_id of this Condition.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    @property
    def opt(self):
        """Gets the opt of this Condition.  # noqa: E501

        操作符。  # noqa: E501

        :return: The opt of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._opt

    @opt.setter
    def opt(self, opt):
        """Sets the opt of this Condition.

        操作符。  # noqa: E501

        :param opt: The opt of this Condition.  # noqa: E501
        :type: str
        """
        allowed_values = ["eq", "ne", "gt", "ge", "lt", "le", "contains", "not contains", "startsWith", "endsWith", "isNull", "isNotNull", "in", "not in", "between", "notbetween"]  # noqa: E501
        if opt not in allowed_values:
            raise ValueError(
                "Invalid value for `opt` ({0}), must be one of {1}"  # noqa: E501
                .format(opt, allowed_values)
            )

        self._opt = opt

    @property
    def value(self):
        """Gets the value of this Condition.  # noqa: E501

        值。opt为notbetween，between，not in，in时，value为数组。opt为isNull，isNotNull时value不需要传值。Opt为eq，ne，gt，ge，lt，le时为数值类型。Opt为eq，ne时value可以是数值和字符串类型。其余情况下value为字符串类型  # noqa: E501

        :return: The value of this Condition.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Condition.

        值。opt为notbetween，between，not in，in时，value为数组。opt为isNull，isNotNull时value不需要传值。Opt为eq，ne，gt，ge，lt，le时为数值类型。Opt为eq，ne时value可以是数值和字符串类型。其余情况下value为字符串类型  # noqa: E501

        :param value: The value of this Condition.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def func(self):
        """Gets the func of this Condition.  # noqa: E501

        函数  # noqa: E501

        :return: The func of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._func

    @func.setter
    def func(self, func):
        """Sets the func of this Condition.

        函数  # noqa: E501

        :param func: The func of this Condition.  # noqa: E501
        :type: str
        """
        allowed_values = ["dayofyear", "dayofmonth", "week", "weekofyear", "month", "quarter", "year", "daytonow", "weektonow", "yeartonow", "monthtonow", "quartertonow", "fmtday", "fmtmonth", "fmtquarter", "fmtyear", "hour", "minute", "second", "length"]  # noqa: E501
        if func not in allowed_values:
            raise ValueError(
                "Invalid value for `func` ({0}), must be one of {1}"  # noqa: E501
                .format(func, allowed_values)
            )

        self._func = func

    @property
    def var(self):
        """Gets the var of this Condition.  # noqa: E501

        是否表达式  # noqa: E501

        :return: The var of this Condition.  # noqa: E501
        :rtype: bool
        """
        return self._var

    @var.setter
    def var(self, var):
        """Sets the var of this Condition.

        是否表达式  # noqa: E501

        :param var: The var of this Condition.  # noqa: E501
        :type: bool
        """

        self._var = var

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Condition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Condition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
